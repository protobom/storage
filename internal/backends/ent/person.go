// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/person"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// ProtoMessage holds the value of the "proto_message" field.
	ProtoMessage *sbom.Person `json:"-"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsOrg holds the value of the "is_org" field.
	IsOrg bool `json:"is_org,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonQuery when eager-loading is set.
	Edges        PersonEdges `json:"-"`
	selectValues sql.SelectValues
}

// PersonEdges holds the relations/edges for other nodes in the graph.
type PersonEdges struct {
	// ContactOwner holds the value of the contact_owner edge.
	ContactOwner []*Person `json:"-"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Person `json:"contacts,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"-"`
	// Metadata holds the value of the metadata edge.
	Metadata []*Metadata `json:"-"`
	// OriginatorNodes holds the value of the originator_nodes edge.
	OriginatorNodes []*Node `json:"-"`
	// SupplierNodes holds the value of the supplier_nodes edge.
	SupplierNodes []*Node `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ContactOwnerOrErr returns the ContactOwner value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) ContactOwnerOrErr() ([]*Person, error) {
	if e.loadedTypes[0] {
		return e.ContactOwner, nil
	}
	return nil, &NotLoadedError{edge: "contact_owner"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) ContactsOrErr() ([]*Person, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[2] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) MetadataOrErr() ([]*Metadata, error) {
	if e.loadedTypes[3] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// OriginatorNodesOrErr returns the OriginatorNodes value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) OriginatorNodesOrErr() ([]*Node, error) {
	if e.loadedTypes[4] {
		return e.OriginatorNodes, nil
	}
	return nil, &NotLoadedError{edge: "originator_nodes"}
}

// SupplierNodesOrErr returns the SupplierNodes value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) SupplierNodesOrErr() ([]*Node, error) {
	if e.loadedTypes[5] {
		return e.SupplierNodes, nil
	}
	return nil, &NotLoadedError{edge: "supplier_nodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldProtoMessage:
			values[i] = &sql.NullScanner{S: new(sbom.Person)}
		case person.FieldIsOrg:
			values[i] = new(sql.NullBool)
		case person.FieldName, person.FieldEmail, person.FieldURL, person.FieldPhone:
			values[i] = new(sql.NullString)
		case person.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case person.FieldProtoMessage:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field proto_message", values[i])
			} else if value.Valid {
				pe.ProtoMessage = value.S.(*sbom.Person)
			}
		case person.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case person.FieldIsOrg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_org", values[i])
			} else if value.Valid {
				pe.IsOrg = value.Bool
			}
		case person.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pe.Email = value.String
			}
		case person.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pe.URL = value.String
			}
		case person.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pe.Phone = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Person.
// This includes values selected through modifiers, order, etc.
func (pe *Person) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryContactOwner queries the "contact_owner" edge of the Person entity.
func (pe *Person) QueryContactOwner() *PersonQuery {
	return NewPersonClient(pe.config).QueryContactOwner(pe)
}

// QueryContacts queries the "contacts" edge of the Person entity.
func (pe *Person) QueryContacts() *PersonQuery {
	return NewPersonClient(pe.config).QueryContacts(pe)
}

// QueryDocuments queries the "documents" edge of the Person entity.
func (pe *Person) QueryDocuments() *DocumentQuery {
	return NewPersonClient(pe.config).QueryDocuments(pe)
}

// QueryMetadata queries the "metadata" edge of the Person entity.
func (pe *Person) QueryMetadata() *MetadataQuery {
	return NewPersonClient(pe.config).QueryMetadata(pe)
}

// QueryOriginatorNodes queries the "originator_nodes" edge of the Person entity.
func (pe *Person) QueryOriginatorNodes() *NodeQuery {
	return NewPersonClient(pe.config).QueryOriginatorNodes(pe)
}

// QuerySupplierNodes queries the "supplier_nodes" edge of the Person entity.
func (pe *Person) QuerySupplierNodes() *NodeQuery {
	return NewPersonClient(pe.config).QuerySupplierNodes(pe)
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return NewPersonClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	if v := pe.ProtoMessage; v != nil {
		builder.WriteString("proto_message=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("is_org=")
	builder.WriteString(fmt.Sprintf("%v", pe.IsOrg))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pe.Email)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pe.URL)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pe.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pe *Person) MarshalJSON() ([]byte, error) {
	type Alias Person
	return json.Marshal(&struct {
		*Alias
		PersonEdges
	}{
		Alias:       (*Alias)(pe),
		PersonEdges: pe.Edges,
	})
}

// Persons is a parsable slice of Person.
type Persons []*Person
