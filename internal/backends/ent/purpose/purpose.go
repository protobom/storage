// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package purpose

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the purpose type in the database.
	Label = "purpose"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrimaryPurpose holds the string denoting the primary_purpose field in the database.
	FieldPrimaryPurpose = "primary_purpose"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeNodes holds the string denoting the nodes edge name in mutations.
	EdgeNodes = "nodes"
	// Table holds the table name of the purpose in the database.
	Table = "purposes"
	// DocumentsTable is the table that holds the documents relation/edge. The primary key declared below.
	DocumentsTable = "document_purposes"
	// DocumentsInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentsInverseTable = "documents"
	// NodesTable is the table that holds the nodes relation/edge. The primary key declared below.
	NodesTable = "node_primary_purposes"
	// NodesInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	NodesInverseTable = "nodes"
)

// Columns holds all SQL columns for purpose fields.
var Columns = []string{
	FieldID,
	FieldPrimaryPurpose,
}

var (
	// DocumentsPrimaryKey and DocumentsColumn2 are the table columns denoting the
	// primary key for the documents relation (M2M).
	DocumentsPrimaryKey = []string{"document_id", "purpose_id"}
	// NodesPrimaryKey and NodesColumn2 are the table columns denoting the
	// primary key for the nodes relation (M2M).
	NodesPrimaryKey = []string{"node_id", "purpose_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// PrimaryPurpose defines the type for the "primary_purpose" enum field.
type PrimaryPurpose string

// PrimaryPurpose values.
const (
	PrimaryPurposeUNKNOWN_PURPOSE        PrimaryPurpose = "UNKNOWN_PURPOSE"
	PrimaryPurposeAPPLICATION            PrimaryPurpose = "APPLICATION"
	PrimaryPurposeARCHIVE                PrimaryPurpose = "ARCHIVE"
	PrimaryPurposeBOM                    PrimaryPurpose = "BOM"
	PrimaryPurposeCONFIGURATION          PrimaryPurpose = "CONFIGURATION"
	PrimaryPurposeCONTAINER              PrimaryPurpose = "CONTAINER"
	PrimaryPurposeDATA                   PrimaryPurpose = "DATA"
	PrimaryPurposeDEVICE                 PrimaryPurpose = "DEVICE"
	PrimaryPurposeDEVICE_DRIVER          PrimaryPurpose = "DEVICE_DRIVER"
	PrimaryPurposeDOCUMENTATION          PrimaryPurpose = "DOCUMENTATION"
	PrimaryPurposeEVIDENCE               PrimaryPurpose = "EVIDENCE"
	PrimaryPurposeEXECUTABLE             PrimaryPurpose = "EXECUTABLE"
	PrimaryPurposeFILE                   PrimaryPurpose = "FILE"
	PrimaryPurposeFIRMWARE               PrimaryPurpose = "FIRMWARE"
	PrimaryPurposeFRAMEWORK              PrimaryPurpose = "FRAMEWORK"
	PrimaryPurposeINSTALL                PrimaryPurpose = "INSTALL"
	PrimaryPurposeLIBRARY                PrimaryPurpose = "LIBRARY"
	PrimaryPurposeMACHINE_LEARNING_MODEL PrimaryPurpose = "MACHINE_LEARNING_MODEL"
	PrimaryPurposeMANIFEST               PrimaryPurpose = "MANIFEST"
	PrimaryPurposeMODEL                  PrimaryPurpose = "MODEL"
	PrimaryPurposeMODULE                 PrimaryPurpose = "MODULE"
	PrimaryPurposeOPERATING_SYSTEM       PrimaryPurpose = "OPERATING_SYSTEM"
	PrimaryPurposeOTHER                  PrimaryPurpose = "OTHER"
	PrimaryPurposePATCH                  PrimaryPurpose = "PATCH"
	PrimaryPurposePLATFORM               PrimaryPurpose = "PLATFORM"
	PrimaryPurposeREQUIREMENT            PrimaryPurpose = "REQUIREMENT"
	PrimaryPurposeSOURCE                 PrimaryPurpose = "SOURCE"
	PrimaryPurposeSPECIFICATION          PrimaryPurpose = "SPECIFICATION"
	PrimaryPurposeTEST                   PrimaryPurpose = "TEST"
)

func (pp PrimaryPurpose) String() string {
	return string(pp)
}

// PrimaryPurposeValidator is a validator for the "primary_purpose" field enum values. It is called by the builders before save.
func PrimaryPurposeValidator(pp PrimaryPurpose) error {
	switch pp {
	case PrimaryPurposeUNKNOWN_PURPOSE, PrimaryPurposeAPPLICATION, PrimaryPurposeARCHIVE, PrimaryPurposeBOM, PrimaryPurposeCONFIGURATION, PrimaryPurposeCONTAINER, PrimaryPurposeDATA, PrimaryPurposeDEVICE, PrimaryPurposeDEVICE_DRIVER, PrimaryPurposeDOCUMENTATION, PrimaryPurposeEVIDENCE, PrimaryPurposeEXECUTABLE, PrimaryPurposeFILE, PrimaryPurposeFIRMWARE, PrimaryPurposeFRAMEWORK, PrimaryPurposeINSTALL, PrimaryPurposeLIBRARY, PrimaryPurposeMACHINE_LEARNING_MODEL, PrimaryPurposeMANIFEST, PrimaryPurposeMODEL, PrimaryPurposeMODULE, PrimaryPurposeOPERATING_SYSTEM, PrimaryPurposeOTHER, PrimaryPurposePATCH, PrimaryPurposePLATFORM, PrimaryPurposeREQUIREMENT, PrimaryPurposeSOURCE, PrimaryPurposeSPECIFICATION, PrimaryPurposeTEST:
		return nil
	default:
		return fmt.Errorf("purpose: invalid enum value for primary_purpose field: %q", pp)
	}
}

// OrderOption defines the ordering options for the Purpose queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrimaryPurpose orders the results by the primary_purpose field.
func ByPrimaryPurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryPurpose, opts...).ToFunc()
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodesCount orders the results by nodes count.
func ByNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodesStep(), opts...)
	}
}

// ByNodes orders the results by nodes terms.
func ByNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DocumentsTable, DocumentsPrimaryKey...),
	)
}
func newNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NodesTable, NodesPrimaryKey...),
	)
}
