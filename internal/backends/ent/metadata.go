// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/metadata"
)

// Metadata is the model entity for the Metadata schema.
type Metadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProtoMessage holds the value of the "proto_message" field.
	ProtoMessage *sbom.Metadata `json:"proto_message,omitempty"`
	// NativeID holds the value of the "native_id" field.
	NativeID string `json:"native_id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataQuery when eager-loading is set.
	Edges        MetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MetadataEdges holds the relations/edges for other nodes in the graph.
type MetadataEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Tools holds the value of the tools edge.
	Tools []*Tool `json:"tools,omitempty"`
	// Authors holds the value of the authors edge.
	Authors []*Person `json:"authors,omitempty"`
	// DocumentTypes holds the value of the document_types edge.
	DocumentTypes []*DocumentType `json:"document_types,omitempty"`
	// SourceData holds the value of the source_data edge.
	SourceData []*SourceData `json:"source_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetadataEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// ToolsOrErr returns the Tools value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataEdges) ToolsOrErr() ([]*Tool, error) {
	if e.loadedTypes[1] {
		return e.Tools, nil
	}
	return nil, &NotLoadedError{edge: "tools"}
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataEdges) AuthorsOrErr() ([]*Person, error) {
	if e.loadedTypes[2] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// DocumentTypesOrErr returns the DocumentTypes value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataEdges) DocumentTypesOrErr() ([]*DocumentType, error) {
	if e.loadedTypes[3] {
		return e.DocumentTypes, nil
	}
	return nil, &NotLoadedError{edge: "document_types"}
}

// SourceDataOrErr returns the SourceData value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataEdges) SourceDataOrErr() ([]*SourceData, error) {
	if e.loadedTypes[4] {
		return e.SourceData, nil
	}
	return nil, &NotLoadedError{edge: "source_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadata.FieldProtoMessage:
			values[i] = &sql.NullScanner{S: new(sbom.Metadata)}
		case metadata.FieldNativeID, metadata.FieldVersion, metadata.FieldName, metadata.FieldComment:
			values[i] = new(sql.NullString)
		case metadata.FieldDate:
			values[i] = new(sql.NullTime)
		case metadata.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metadata fields.
func (m *Metadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case metadata.FieldProtoMessage:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field proto_message", values[i])
			} else if value.Valid {
				m.ProtoMessage = value.S.(*sbom.Metadata)
			}
		case metadata.FieldNativeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field native_id", values[i])
			} else if value.Valid {
				m.NativeID = value.String
			}
		case metadata.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				m.Version = value.String
			}
		case metadata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case metadata.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				m.Date = value.Time
			}
		case metadata.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				m.Comment = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metadata.
// This includes values selected through modifiers, order, etc.
func (m *Metadata) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the Metadata entity.
func (m *Metadata) QueryDocument() *DocumentQuery {
	return NewMetadataClient(m.config).QueryDocument(m)
}

// QueryTools queries the "tools" edge of the Metadata entity.
func (m *Metadata) QueryTools() *ToolQuery {
	return NewMetadataClient(m.config).QueryTools(m)
}

// QueryAuthors queries the "authors" edge of the Metadata entity.
func (m *Metadata) QueryAuthors() *PersonQuery {
	return NewMetadataClient(m.config).QueryAuthors(m)
}

// QueryDocumentTypes queries the "document_types" edge of the Metadata entity.
func (m *Metadata) QueryDocumentTypes() *DocumentTypeQuery {
	return NewMetadataClient(m.config).QueryDocumentTypes(m)
}

// QuerySourceData queries the "source_data" edge of the Metadata entity.
func (m *Metadata) QuerySourceData() *SourceDataQuery {
	return NewMetadataClient(m.config).QuerySourceData(m)
}

// Update returns a builder for updating this Metadata.
// Note that you need to call Metadata.Unwrap() before calling this method if this Metadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metadata) Update() *MetadataUpdateOne {
	return NewMetadataClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metadata) Unwrap() *Metadata {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metadata is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metadata) String() string {
	var builder strings.Builder
	builder.WriteString("Metadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	if v := m.ProtoMessage; v != nil {
		builder.WriteString("proto_message=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("native_id=")
	builder.WriteString(m.NativeID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(m.Version)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(m.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(m.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// MetadataSlice is a parsable slice of Metadata.
type MetadataSlice []*Metadata
