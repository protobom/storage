// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/edgetype"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/nodelist"
	"github.com/protobom/storage/internal/backends/ent/person"
	"github.com/protobom/storage/internal/backends/ent/property"
	"github.com/protobom/storage/internal/backends/ent/purpose"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDocumentID sets the "document_id" field.
func (nc *NodeCreate) SetDocumentID(u uuid.UUID) *NodeCreate {
	nc.mutation.SetDocumentID(u)
	return nc
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDocumentID(u *uuid.UUID) *NodeCreate {
	if u != nil {
		nc.SetDocumentID(*u)
	}
	return nc
}

// SetProtoMessage sets the "proto_message" field.
func (nc *NodeCreate) SetProtoMessage(s *sbom.Node) *NodeCreate {
	nc.mutation.SetProtoMessage(s)
	return nc
}

// SetNodeListID sets the "node_list_id" field.
func (nc *NodeCreate) SetNodeListID(u uuid.UUID) *NodeCreate {
	nc.mutation.SetNodeListID(u)
	return nc
}

// SetNillableNodeListID sets the "node_list_id" field if the given value is not nil.
func (nc *NodeCreate) SetNillableNodeListID(u *uuid.UUID) *NodeCreate {
	if u != nil {
		nc.SetNodeListID(*u)
	}
	return nc
}

// SetType sets the "type" field.
func (nc *NodeCreate) SetType(n node.Type) *NodeCreate {
	nc.mutation.SetType(n)
	return nc
}

// SetName sets the "name" field.
func (nc *NodeCreate) SetName(s string) *NodeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetVersion sets the "version" field.
func (nc *NodeCreate) SetVersion(s string) *NodeCreate {
	nc.mutation.SetVersion(s)
	return nc
}

// SetFileName sets the "file_name" field.
func (nc *NodeCreate) SetFileName(s string) *NodeCreate {
	nc.mutation.SetFileName(s)
	return nc
}

// SetURLHome sets the "url_home" field.
func (nc *NodeCreate) SetURLHome(s string) *NodeCreate {
	nc.mutation.SetURLHome(s)
	return nc
}

// SetURLDownload sets the "url_download" field.
func (nc *NodeCreate) SetURLDownload(s string) *NodeCreate {
	nc.mutation.SetURLDownload(s)
	return nc
}

// SetLicenses sets the "licenses" field.
func (nc *NodeCreate) SetLicenses(s []string) *NodeCreate {
	nc.mutation.SetLicenses(s)
	return nc
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nc *NodeCreate) SetLicenseConcluded(s string) *NodeCreate {
	nc.mutation.SetLicenseConcluded(s)
	return nc
}

// SetLicenseComments sets the "license_comments" field.
func (nc *NodeCreate) SetLicenseComments(s string) *NodeCreate {
	nc.mutation.SetLicenseComments(s)
	return nc
}

// SetCopyright sets the "copyright" field.
func (nc *NodeCreate) SetCopyright(s string) *NodeCreate {
	nc.mutation.SetCopyright(s)
	return nc
}

// SetSourceInfo sets the "source_info" field.
func (nc *NodeCreate) SetSourceInfo(s string) *NodeCreate {
	nc.mutation.SetSourceInfo(s)
	return nc
}

// SetComment sets the "comment" field.
func (nc *NodeCreate) SetComment(s string) *NodeCreate {
	nc.mutation.SetComment(s)
	return nc
}

// SetSummary sets the "summary" field.
func (nc *NodeCreate) SetSummary(s string) *NodeCreate {
	nc.mutation.SetSummary(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NodeCreate) SetDescription(s string) *NodeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetReleaseDate sets the "release_date" field.
func (nc *NodeCreate) SetReleaseDate(t time.Time) *NodeCreate {
	nc.mutation.SetReleaseDate(t)
	return nc
}

// SetBuildDate sets the "build_date" field.
func (nc *NodeCreate) SetBuildDate(t time.Time) *NodeCreate {
	nc.mutation.SetBuildDate(t)
	return nc
}

// SetValidUntilDate sets the "valid_until_date" field.
func (nc *NodeCreate) SetValidUntilDate(t time.Time) *NodeCreate {
	nc.mutation.SetValidUntilDate(t)
	return nc
}

// SetAttribution sets the "attribution" field.
func (nc *NodeCreate) SetAttribution(s []string) *NodeCreate {
	nc.mutation.SetAttribution(s)
	return nc
}

// SetFileTypes sets the "file_types" field.
func (nc *NodeCreate) SetFileTypes(s []string) *NodeCreate {
	nc.mutation.SetFileTypes(s)
	return nc
}

// SetHashes sets the "hashes" field.
func (nc *NodeCreate) SetHashes(m map[int32]string) *NodeCreate {
	nc.mutation.SetHashes(m)
	return nc
}

// SetIdentifiers sets the "identifiers" field.
func (nc *NodeCreate) SetIdentifiers(m map[int32]string) *NodeCreate {
	nc.mutation.SetIdentifiers(m)
	return nc
}

// SetID sets the "id" field.
func (nc *NodeCreate) SetID(s string) *NodeCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetDocument sets the "document" edge to the Document entity.
func (nc *NodeCreate) SetDocument(d *Document) *NodeCreate {
	return nc.SetDocumentID(d.ID)
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nc *NodeCreate) AddSupplierIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddSupplierIDs(ids...)
	return nc
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nc *NodeCreate) AddSuppliers(p ...*Person) *NodeCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nc *NodeCreate) AddOriginatorIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddOriginatorIDs(ids...)
	return nc
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nc *NodeCreate) AddOriginators(p ...*Person) *NodeCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nc *NodeCreate) AddExternalReferenceIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddExternalReferenceIDs(ids...)
	return nc
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nc *NodeCreate) AddExternalReferences(e ...*ExternalReference) *NodeCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nc.AddExternalReferenceIDs(ids...)
}

// AddPrimaryPurposeIDs adds the "primary_purpose" edge to the Purpose entity by IDs.
func (nc *NodeCreate) AddPrimaryPurposeIDs(ids ...int) *NodeCreate {
	nc.mutation.AddPrimaryPurposeIDs(ids...)
	return nc
}

// AddPrimaryPurpose adds the "primary_purpose" edges to the Purpose entity.
func (nc *NodeCreate) AddPrimaryPurpose(p ...*Purpose) *NodeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddPrimaryPurposeIDs(ids...)
}

// AddToNodeIDs adds the "to_nodes" edge to the Node entity by IDs.
func (nc *NodeCreate) AddToNodeIDs(ids ...string) *NodeCreate {
	nc.mutation.AddToNodeIDs(ids...)
	return nc
}

// AddToNodes adds the "to_nodes" edges to the Node entity.
func (nc *NodeCreate) AddToNodes(n ...*Node) *NodeCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddToNodeIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nc *NodeCreate) AddNodeIDs(ids ...string) *NodeCreate {
	nc.mutation.AddNodeIDs(ids...)
	return nc
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nc *NodeCreate) AddNodes(n ...*Node) *NodeCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddNodeIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (nc *NodeCreate) AddPropertyIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddPropertyIDs(ids...)
	return nc
}

// AddProperties adds the "properties" edges to the Property entity.
func (nc *NodeCreate) AddProperties(p ...*Property) *NodeCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddPropertyIDs(ids...)
}

// AddNodeListIDs adds the "node_lists" edge to the NodeList entity by IDs.
func (nc *NodeCreate) AddNodeListIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddNodeListIDs(ids...)
	return nc
}

// AddNodeLists adds the "node_lists" edges to the NodeList entity.
func (nc *NodeCreate) AddNodeLists(n ...*NodeList) *NodeCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddNodeListIDs(ids...)
}

// AddEdgeTypeIDs adds the "edge_types" edge to the EdgeType entity by IDs.
func (nc *NodeCreate) AddEdgeTypeIDs(ids ...int) *NodeCreate {
	nc.mutation.AddEdgeTypeIDs(ids...)
	return nc
}

// AddEdgeTypes adds the "edge_types" edges to the EdgeType entity.
func (nc *NodeCreate) AddEdgeTypes(e ...*EdgeType) *NodeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nc.AddEdgeTypeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nc *NodeCreate) Mutation() *NodeMutation {
	return nc.mutation
}

// Save creates the Node in the database.
func (nc *NodeCreate) Save(ctx context.Context) (*Node, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NodeCreate) defaults() {
	if _, ok := nc.mutation.DocumentID(); !ok {
		v := node.DefaultDocumentID()
		nc.mutation.SetDocumentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodeCreate) check() error {
	if _, ok := nc.mutation.ProtoMessage(); !ok {
		return &ValidationError{Name: "proto_message", err: errors.New(`ent: missing required field "Node.proto_message"`)}
	}
	if _, ok := nc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Node.type"`)}
	}
	if v, ok := nc.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Node.name"`)}
	}
	if _, ok := nc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Node.version"`)}
	}
	if _, ok := nc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Node.file_name"`)}
	}
	if _, ok := nc.mutation.URLHome(); !ok {
		return &ValidationError{Name: "url_home", err: errors.New(`ent: missing required field "Node.url_home"`)}
	}
	if _, ok := nc.mutation.URLDownload(); !ok {
		return &ValidationError{Name: "url_download", err: errors.New(`ent: missing required field "Node.url_download"`)}
	}
	if _, ok := nc.mutation.Licenses(); !ok {
		return &ValidationError{Name: "licenses", err: errors.New(`ent: missing required field "Node.licenses"`)}
	}
	if _, ok := nc.mutation.LicenseConcluded(); !ok {
		return &ValidationError{Name: "license_concluded", err: errors.New(`ent: missing required field "Node.license_concluded"`)}
	}
	if _, ok := nc.mutation.LicenseComments(); !ok {
		return &ValidationError{Name: "license_comments", err: errors.New(`ent: missing required field "Node.license_comments"`)}
	}
	if _, ok := nc.mutation.Copyright(); !ok {
		return &ValidationError{Name: "copyright", err: errors.New(`ent: missing required field "Node.copyright"`)}
	}
	if _, ok := nc.mutation.SourceInfo(); !ok {
		return &ValidationError{Name: "source_info", err: errors.New(`ent: missing required field "Node.source_info"`)}
	}
	if _, ok := nc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Node.comment"`)}
	}
	if _, ok := nc.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "Node.summary"`)}
	}
	if _, ok := nc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Node.description"`)}
	}
	if _, ok := nc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "Node.release_date"`)}
	}
	if _, ok := nc.mutation.BuildDate(); !ok {
		return &ValidationError{Name: "build_date", err: errors.New(`ent: missing required field "Node.build_date"`)}
	}
	if _, ok := nc.mutation.ValidUntilDate(); !ok {
		return &ValidationError{Name: "valid_until_date", err: errors.New(`ent: missing required field "Node.valid_until_date"`)}
	}
	if _, ok := nc.mutation.Attribution(); !ok {
		return &ValidationError{Name: "attribution", err: errors.New(`ent: missing required field "Node.attribution"`)}
	}
	if _, ok := nc.mutation.FileTypes(); !ok {
		return &ValidationError{Name: "file_types", err: errors.New(`ent: missing required field "Node.file_types"`)}
	}
	if v, ok := nc.mutation.ID(); ok {
		if err := node.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Node.id": %w`, err)}
		}
	}
	return nil
}

func (nc *NodeCreate) sqlSave(ctx context.Context) (*Node, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Node.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NodeCreate) createSpec() (*Node, *sqlgraph.CreateSpec) {
	var (
		_node = &Node{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(node.Table, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.ProtoMessage(); ok {
		_spec.SetField(node.FieldProtoMessage, field.TypeBytes, value)
		_node.ProtoMessage = value
	}
	if value, ok := nc.mutation.NodeListID(); ok {
		_spec.SetField(node.FieldNodeListID, field.TypeUUID, value)
		_node.NodeListID = value
	}
	if value, ok := nc.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := nc.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := nc.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
		_node.URLHome = value
	}
	if value, ok := nc.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
		_node.URLDownload = value
	}
	if value, ok := nc.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeJSON, value)
		_node.Licenses = value
	}
	if value, ok := nc.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
		_node.LicenseConcluded = value
	}
	if value, ok := nc.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
		_node.LicenseComments = value
	}
	if value, ok := nc.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := nc.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
		_node.SourceInfo = value
	}
	if value, ok := nc.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := nc.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.ReleaseDate(); ok {
		_spec.SetField(node.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := nc.mutation.BuildDate(); ok {
		_spec.SetField(node.FieldBuildDate, field.TypeTime, value)
		_node.BuildDate = value
	}
	if value, ok := nc.mutation.ValidUntilDate(); ok {
		_spec.SetField(node.FieldValidUntilDate, field.TypeTime, value)
		_node.ValidUntilDate = value
	}
	if value, ok := nc.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeJSON, value)
		_node.Attribution = value
	}
	if value, ok := nc.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeJSON, value)
		_node.FileTypes = value
	}
	if value, ok := nc.mutation.Hashes(); ok {
		_spec.SetField(node.FieldHashes, field.TypeJSON, value)
		_node.Hashes = value
	}
	if value, ok := nc.mutation.Identifiers(); ok {
		_spec.SetField(node.FieldIdentifiers, field.TypeJSON, value)
		_node.Identifiers = value
	}
	if nodes := nc.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   node.DocumentTable,
			Columns: []string{node.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DocumentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.PrimaryPurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ToNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EdgeTypeCreate{config: nc.config, mutation: newEdgeTypeMutation(nc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.NodeListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.EdgeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Node.Create().
//		SetDocumentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NodeUpsert) {
//			SetDocumentID(v+v).
//		}).
//		Exec(ctx)
func (nc *NodeCreate) OnConflict(opts ...sql.ConflictOption) *NodeUpsertOne {
	nc.conflict = opts
	return &NodeUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NodeCreate) OnConflictColumns(columns ...string) *NodeUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NodeUpsertOne{
		create: nc,
	}
}

type (
	// NodeUpsertOne is the builder for "upsert"-ing
	//  one Node node.
	NodeUpsertOne struct {
		create *NodeCreate
	}

	// NodeUpsert is the "OnConflict" setter.
	NodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetNodeListID sets the "node_list_id" field.
func (u *NodeUpsert) SetNodeListID(v uuid.UUID) *NodeUpsert {
	u.Set(node.FieldNodeListID, v)
	return u
}

// UpdateNodeListID sets the "node_list_id" field to the value that was provided on create.
func (u *NodeUpsert) UpdateNodeListID() *NodeUpsert {
	u.SetExcluded(node.FieldNodeListID)
	return u
}

// ClearNodeListID clears the value of the "node_list_id" field.
func (u *NodeUpsert) ClearNodeListID() *NodeUpsert {
	u.SetNull(node.FieldNodeListID)
	return u
}

// SetType sets the "type" field.
func (u *NodeUpsert) SetType(v node.Type) *NodeUpsert {
	u.Set(node.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NodeUpsert) UpdateType() *NodeUpsert {
	u.SetExcluded(node.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *NodeUpsert) SetName(v string) *NodeUpsert {
	u.Set(node.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsert) UpdateName() *NodeUpsert {
	u.SetExcluded(node.FieldName)
	return u
}

// SetVersion sets the "version" field.
func (u *NodeUpsert) SetVersion(v string) *NodeUpsert {
	u.Set(node.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *NodeUpsert) UpdateVersion() *NodeUpsert {
	u.SetExcluded(node.FieldVersion)
	return u
}

// SetFileName sets the "file_name" field.
func (u *NodeUpsert) SetFileName(v string) *NodeUpsert {
	u.Set(node.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *NodeUpsert) UpdateFileName() *NodeUpsert {
	u.SetExcluded(node.FieldFileName)
	return u
}

// SetURLHome sets the "url_home" field.
func (u *NodeUpsert) SetURLHome(v string) *NodeUpsert {
	u.Set(node.FieldURLHome, v)
	return u
}

// UpdateURLHome sets the "url_home" field to the value that was provided on create.
func (u *NodeUpsert) UpdateURLHome() *NodeUpsert {
	u.SetExcluded(node.FieldURLHome)
	return u
}

// SetURLDownload sets the "url_download" field.
func (u *NodeUpsert) SetURLDownload(v string) *NodeUpsert {
	u.Set(node.FieldURLDownload, v)
	return u
}

// UpdateURLDownload sets the "url_download" field to the value that was provided on create.
func (u *NodeUpsert) UpdateURLDownload() *NodeUpsert {
	u.SetExcluded(node.FieldURLDownload)
	return u
}

// SetLicenses sets the "licenses" field.
func (u *NodeUpsert) SetLicenses(v []string) *NodeUpsert {
	u.Set(node.FieldLicenses, v)
	return u
}

// UpdateLicenses sets the "licenses" field to the value that was provided on create.
func (u *NodeUpsert) UpdateLicenses() *NodeUpsert {
	u.SetExcluded(node.FieldLicenses)
	return u
}

// SetLicenseConcluded sets the "license_concluded" field.
func (u *NodeUpsert) SetLicenseConcluded(v string) *NodeUpsert {
	u.Set(node.FieldLicenseConcluded, v)
	return u
}

// UpdateLicenseConcluded sets the "license_concluded" field to the value that was provided on create.
func (u *NodeUpsert) UpdateLicenseConcluded() *NodeUpsert {
	u.SetExcluded(node.FieldLicenseConcluded)
	return u
}

// SetLicenseComments sets the "license_comments" field.
func (u *NodeUpsert) SetLicenseComments(v string) *NodeUpsert {
	u.Set(node.FieldLicenseComments, v)
	return u
}

// UpdateLicenseComments sets the "license_comments" field to the value that was provided on create.
func (u *NodeUpsert) UpdateLicenseComments() *NodeUpsert {
	u.SetExcluded(node.FieldLicenseComments)
	return u
}

// SetCopyright sets the "copyright" field.
func (u *NodeUpsert) SetCopyright(v string) *NodeUpsert {
	u.Set(node.FieldCopyright, v)
	return u
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *NodeUpsert) UpdateCopyright() *NodeUpsert {
	u.SetExcluded(node.FieldCopyright)
	return u
}

// SetSourceInfo sets the "source_info" field.
func (u *NodeUpsert) SetSourceInfo(v string) *NodeUpsert {
	u.Set(node.FieldSourceInfo, v)
	return u
}

// UpdateSourceInfo sets the "source_info" field to the value that was provided on create.
func (u *NodeUpsert) UpdateSourceInfo() *NodeUpsert {
	u.SetExcluded(node.FieldSourceInfo)
	return u
}

// SetComment sets the "comment" field.
func (u *NodeUpsert) SetComment(v string) *NodeUpsert {
	u.Set(node.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NodeUpsert) UpdateComment() *NodeUpsert {
	u.SetExcluded(node.FieldComment)
	return u
}

// SetSummary sets the "summary" field.
func (u *NodeUpsert) SetSummary(v string) *NodeUpsert {
	u.Set(node.FieldSummary, v)
	return u
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *NodeUpsert) UpdateSummary() *NodeUpsert {
	u.SetExcluded(node.FieldSummary)
	return u
}

// SetDescription sets the "description" field.
func (u *NodeUpsert) SetDescription(v string) *NodeUpsert {
	u.Set(node.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsert) UpdateDescription() *NodeUpsert {
	u.SetExcluded(node.FieldDescription)
	return u
}

// SetReleaseDate sets the "release_date" field.
func (u *NodeUpsert) SetReleaseDate(v time.Time) *NodeUpsert {
	u.Set(node.FieldReleaseDate, v)
	return u
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *NodeUpsert) UpdateReleaseDate() *NodeUpsert {
	u.SetExcluded(node.FieldReleaseDate)
	return u
}

// SetBuildDate sets the "build_date" field.
func (u *NodeUpsert) SetBuildDate(v time.Time) *NodeUpsert {
	u.Set(node.FieldBuildDate, v)
	return u
}

// UpdateBuildDate sets the "build_date" field to the value that was provided on create.
func (u *NodeUpsert) UpdateBuildDate() *NodeUpsert {
	u.SetExcluded(node.FieldBuildDate)
	return u
}

// SetValidUntilDate sets the "valid_until_date" field.
func (u *NodeUpsert) SetValidUntilDate(v time.Time) *NodeUpsert {
	u.Set(node.FieldValidUntilDate, v)
	return u
}

// UpdateValidUntilDate sets the "valid_until_date" field to the value that was provided on create.
func (u *NodeUpsert) UpdateValidUntilDate() *NodeUpsert {
	u.SetExcluded(node.FieldValidUntilDate)
	return u
}

// SetAttribution sets the "attribution" field.
func (u *NodeUpsert) SetAttribution(v []string) *NodeUpsert {
	u.Set(node.FieldAttribution, v)
	return u
}

// UpdateAttribution sets the "attribution" field to the value that was provided on create.
func (u *NodeUpsert) UpdateAttribution() *NodeUpsert {
	u.SetExcluded(node.FieldAttribution)
	return u
}

// SetFileTypes sets the "file_types" field.
func (u *NodeUpsert) SetFileTypes(v []string) *NodeUpsert {
	u.Set(node.FieldFileTypes, v)
	return u
}

// UpdateFileTypes sets the "file_types" field to the value that was provided on create.
func (u *NodeUpsert) UpdateFileTypes() *NodeUpsert {
	u.SetExcluded(node.FieldFileTypes)
	return u
}

// SetHashes sets the "hashes" field.
func (u *NodeUpsert) SetHashes(v map[int32]string) *NodeUpsert {
	u.Set(node.FieldHashes, v)
	return u
}

// UpdateHashes sets the "hashes" field to the value that was provided on create.
func (u *NodeUpsert) UpdateHashes() *NodeUpsert {
	u.SetExcluded(node.FieldHashes)
	return u
}

// ClearHashes clears the value of the "hashes" field.
func (u *NodeUpsert) ClearHashes() *NodeUpsert {
	u.SetNull(node.FieldHashes)
	return u
}

// SetIdentifiers sets the "identifiers" field.
func (u *NodeUpsert) SetIdentifiers(v map[int32]string) *NodeUpsert {
	u.Set(node.FieldIdentifiers, v)
	return u
}

// UpdateIdentifiers sets the "identifiers" field to the value that was provided on create.
func (u *NodeUpsert) UpdateIdentifiers() *NodeUpsert {
	u.SetExcluded(node.FieldIdentifiers)
	return u
}

// ClearIdentifiers clears the value of the "identifiers" field.
func (u *NodeUpsert) ClearIdentifiers() *NodeUpsert {
	u.SetNull(node.FieldIdentifiers)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(node.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NodeUpsertOne) UpdateNewValues() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(node.FieldID)
		}
		if _, exists := u.create.mutation.DocumentID(); exists {
			s.SetIgnore(node.FieldDocumentID)
		}
		if _, exists := u.create.mutation.ProtoMessage(); exists {
			s.SetIgnore(node.FieldProtoMessage)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NodeUpsertOne) Ignore() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NodeUpsertOne) DoNothing() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NodeCreate.OnConflict
// documentation for more info.
func (u *NodeUpsertOne) Update(set func(*NodeUpsert)) *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeListID sets the "node_list_id" field.
func (u *NodeUpsertOne) SetNodeListID(v uuid.UUID) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetNodeListID(v)
	})
}

// UpdateNodeListID sets the "node_list_id" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateNodeListID() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateNodeListID()
	})
}

// ClearNodeListID clears the value of the "node_list_id" field.
func (u *NodeUpsertOne) ClearNodeListID() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearNodeListID()
	})
}

// SetType sets the "type" field.
func (u *NodeUpsertOne) SetType(v node.Type) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateType() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *NodeUpsertOne) SetName(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateName() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *NodeUpsertOne) SetVersion(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateVersion() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateVersion()
	})
}

// SetFileName sets the "file_name" field.
func (u *NodeUpsertOne) SetFileName(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateFileName() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateFileName()
	})
}

// SetURLHome sets the "url_home" field.
func (u *NodeUpsertOne) SetURLHome(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetURLHome(v)
	})
}

// UpdateURLHome sets the "url_home" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateURLHome() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateURLHome()
	})
}

// SetURLDownload sets the "url_download" field.
func (u *NodeUpsertOne) SetURLDownload(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetURLDownload(v)
	})
}

// UpdateURLDownload sets the "url_download" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateURLDownload() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateURLDownload()
	})
}

// SetLicenses sets the "licenses" field.
func (u *NodeUpsertOne) SetLicenses(v []string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenses(v)
	})
}

// UpdateLicenses sets the "licenses" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateLicenses() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenses()
	})
}

// SetLicenseConcluded sets the "license_concluded" field.
func (u *NodeUpsertOne) SetLicenseConcluded(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenseConcluded(v)
	})
}

// UpdateLicenseConcluded sets the "license_concluded" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateLicenseConcluded() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenseConcluded()
	})
}

// SetLicenseComments sets the "license_comments" field.
func (u *NodeUpsertOne) SetLicenseComments(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenseComments(v)
	})
}

// UpdateLicenseComments sets the "license_comments" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateLicenseComments() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenseComments()
	})
}

// SetCopyright sets the "copyright" field.
func (u *NodeUpsertOne) SetCopyright(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateCopyright() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateCopyright()
	})
}

// SetSourceInfo sets the "source_info" field.
func (u *NodeUpsertOne) SetSourceInfo(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetSourceInfo(v)
	})
}

// UpdateSourceInfo sets the "source_info" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateSourceInfo() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateSourceInfo()
	})
}

// SetComment sets the "comment" field.
func (u *NodeUpsertOne) SetComment(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateComment() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateComment()
	})
}

// SetSummary sets the "summary" field.
func (u *NodeUpsertOne) SetSummary(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateSummary() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateSummary()
	})
}

// SetDescription sets the "description" field.
func (u *NodeUpsertOne) SetDescription(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateDescription() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateDescription()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *NodeUpsertOne) SetReleaseDate(v time.Time) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateReleaseDate() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetBuildDate sets the "build_date" field.
func (u *NodeUpsertOne) SetBuildDate(v time.Time) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetBuildDate(v)
	})
}

// UpdateBuildDate sets the "build_date" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateBuildDate() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateBuildDate()
	})
}

// SetValidUntilDate sets the "valid_until_date" field.
func (u *NodeUpsertOne) SetValidUntilDate(v time.Time) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetValidUntilDate(v)
	})
}

// UpdateValidUntilDate sets the "valid_until_date" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateValidUntilDate() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateValidUntilDate()
	})
}

// SetAttribution sets the "attribution" field.
func (u *NodeUpsertOne) SetAttribution(v []string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetAttribution(v)
	})
}

// UpdateAttribution sets the "attribution" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateAttribution() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateAttribution()
	})
}

// SetFileTypes sets the "file_types" field.
func (u *NodeUpsertOne) SetFileTypes(v []string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetFileTypes(v)
	})
}

// UpdateFileTypes sets the "file_types" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateFileTypes() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateFileTypes()
	})
}

// SetHashes sets the "hashes" field.
func (u *NodeUpsertOne) SetHashes(v map[int32]string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetHashes(v)
	})
}

// UpdateHashes sets the "hashes" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateHashes() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateHashes()
	})
}

// ClearHashes clears the value of the "hashes" field.
func (u *NodeUpsertOne) ClearHashes() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearHashes()
	})
}

// SetIdentifiers sets the "identifiers" field.
func (u *NodeUpsertOne) SetIdentifiers(v map[int32]string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetIdentifiers(v)
	})
}

// UpdateIdentifiers sets the "identifiers" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateIdentifiers() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateIdentifiers()
	})
}

// ClearIdentifiers clears the value of the "identifiers" field.
func (u *NodeUpsertOne) ClearIdentifiers() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearIdentifiers()
	})
}

// Exec executes the query.
func (u *NodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NodeUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NodeUpsertOne.ID is not supported by MySQL driver. Use NodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NodeUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Node entities in the database.
func (ncb *NodeCreateBulk) Save(ctx context.Context) ([]*Node, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Node, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodeCreateBulk) SaveX(ctx context.Context) []*Node {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Node.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NodeUpsert) {
//			SetDocumentID(v+v).
//		}).
//		Exec(ctx)
func (ncb *NodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *NodeUpsertBulk {
	ncb.conflict = opts
	return &NodeUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NodeCreateBulk) OnConflictColumns(columns ...string) *NodeUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NodeUpsertBulk{
		create: ncb,
	}
}

// NodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Node nodes.
type NodeUpsertBulk struct {
	create *NodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(node.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NodeUpsertBulk) UpdateNewValues() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(node.FieldID)
			}
			if _, exists := b.mutation.DocumentID(); exists {
				s.SetIgnore(node.FieldDocumentID)
			}
			if _, exists := b.mutation.ProtoMessage(); exists {
				s.SetIgnore(node.FieldProtoMessage)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NodeUpsertBulk) Ignore() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NodeUpsertBulk) DoNothing() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NodeCreateBulk.OnConflict
// documentation for more info.
func (u *NodeUpsertBulk) Update(set func(*NodeUpsert)) *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeListID sets the "node_list_id" field.
func (u *NodeUpsertBulk) SetNodeListID(v uuid.UUID) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetNodeListID(v)
	})
}

// UpdateNodeListID sets the "node_list_id" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateNodeListID() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateNodeListID()
	})
}

// ClearNodeListID clears the value of the "node_list_id" field.
func (u *NodeUpsertBulk) ClearNodeListID() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearNodeListID()
	})
}

// SetType sets the "type" field.
func (u *NodeUpsertBulk) SetType(v node.Type) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateType() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *NodeUpsertBulk) SetName(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateName() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *NodeUpsertBulk) SetVersion(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateVersion() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateVersion()
	})
}

// SetFileName sets the "file_name" field.
func (u *NodeUpsertBulk) SetFileName(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateFileName() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateFileName()
	})
}

// SetURLHome sets the "url_home" field.
func (u *NodeUpsertBulk) SetURLHome(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetURLHome(v)
	})
}

// UpdateURLHome sets the "url_home" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateURLHome() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateURLHome()
	})
}

// SetURLDownload sets the "url_download" field.
func (u *NodeUpsertBulk) SetURLDownload(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetURLDownload(v)
	})
}

// UpdateURLDownload sets the "url_download" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateURLDownload() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateURLDownload()
	})
}

// SetLicenses sets the "licenses" field.
func (u *NodeUpsertBulk) SetLicenses(v []string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenses(v)
	})
}

// UpdateLicenses sets the "licenses" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateLicenses() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenses()
	})
}

// SetLicenseConcluded sets the "license_concluded" field.
func (u *NodeUpsertBulk) SetLicenseConcluded(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenseConcluded(v)
	})
}

// UpdateLicenseConcluded sets the "license_concluded" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateLicenseConcluded() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenseConcluded()
	})
}

// SetLicenseComments sets the "license_comments" field.
func (u *NodeUpsertBulk) SetLicenseComments(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicenseComments(v)
	})
}

// UpdateLicenseComments sets the "license_comments" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateLicenseComments() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicenseComments()
	})
}

// SetCopyright sets the "copyright" field.
func (u *NodeUpsertBulk) SetCopyright(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateCopyright() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateCopyright()
	})
}

// SetSourceInfo sets the "source_info" field.
func (u *NodeUpsertBulk) SetSourceInfo(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetSourceInfo(v)
	})
}

// UpdateSourceInfo sets the "source_info" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateSourceInfo() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateSourceInfo()
	})
}

// SetComment sets the "comment" field.
func (u *NodeUpsertBulk) SetComment(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateComment() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateComment()
	})
}

// SetSummary sets the "summary" field.
func (u *NodeUpsertBulk) SetSummary(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateSummary() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateSummary()
	})
}

// SetDescription sets the "description" field.
func (u *NodeUpsertBulk) SetDescription(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateDescription() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateDescription()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *NodeUpsertBulk) SetReleaseDate(v time.Time) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateReleaseDate() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetBuildDate sets the "build_date" field.
func (u *NodeUpsertBulk) SetBuildDate(v time.Time) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetBuildDate(v)
	})
}

// UpdateBuildDate sets the "build_date" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateBuildDate() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateBuildDate()
	})
}

// SetValidUntilDate sets the "valid_until_date" field.
func (u *NodeUpsertBulk) SetValidUntilDate(v time.Time) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetValidUntilDate(v)
	})
}

// UpdateValidUntilDate sets the "valid_until_date" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateValidUntilDate() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateValidUntilDate()
	})
}

// SetAttribution sets the "attribution" field.
func (u *NodeUpsertBulk) SetAttribution(v []string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetAttribution(v)
	})
}

// UpdateAttribution sets the "attribution" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateAttribution() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateAttribution()
	})
}

// SetFileTypes sets the "file_types" field.
func (u *NodeUpsertBulk) SetFileTypes(v []string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetFileTypes(v)
	})
}

// UpdateFileTypes sets the "file_types" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateFileTypes() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateFileTypes()
	})
}

// SetHashes sets the "hashes" field.
func (u *NodeUpsertBulk) SetHashes(v map[int32]string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetHashes(v)
	})
}

// UpdateHashes sets the "hashes" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateHashes() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateHashes()
	})
}

// ClearHashes clears the value of the "hashes" field.
func (u *NodeUpsertBulk) ClearHashes() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearHashes()
	})
}

// SetIdentifiers sets the "identifiers" field.
func (u *NodeUpsertBulk) SetIdentifiers(v map[int32]string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetIdentifiers(v)
	})
}

// UpdateIdentifiers sets the "identifiers" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateIdentifiers() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateIdentifiers()
	})
}

// ClearIdentifiers clears the value of the "identifiers" field.
func (u *NodeUpsertBulk) ClearIdentifiers() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearIdentifiers()
	})
}

// Exec executes the query.
func (u *NodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
