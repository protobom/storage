// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/metadata"
	"github.com/protobom/storage/internal/backends/ent/nodelist"
)

// Document is the model entity for the Document schema.
type Document struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// MetadataID holds the value of the "metadata_id" field.
	MetadataID uuid.UUID `json:"-"`
	// NodeListID holds the value of the "node_list_id" field.
	NodeListID uuid.UUID `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentQuery when eager-loading is set.
	Edges        DocumentEdges `json:"-"`
	selectValues sql.SelectValues
}

// DocumentEdges holds the relations/edges for other nodes in the graph.
type DocumentEdges struct {
	// Annotations holds the value of the annotations edge.
	Annotations []*Annotation `json:"-"`
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"-"`
	// NodeList holds the value of the node_list edge.
	NodeList *NodeList `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentEdges) AnnotationsOrErr() ([]*Annotation, error) {
	if e.loadedTypes[0] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) MetadataOrErr() (*Metadata, error) {
	if e.Metadata != nil {
		return e.Metadata, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: metadata.Label}
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// NodeListOrErr returns the NodeList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) NodeListOrErr() (*NodeList, error) {
	if e.NodeList != nil {
		return e.NodeList, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: nodelist.Label}
	}
	return nil, &NotLoadedError{edge: "node_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Document) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case document.FieldID, document.FieldMetadataID, document.FieldNodeListID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Document fields.
func (d *Document) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case document.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case document.FieldMetadataID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_id", values[i])
			} else if value != nil {
				d.MetadataID = *value
			}
		case document.FieldNodeListID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field node_list_id", values[i])
			} else if value != nil {
				d.NodeListID = *value
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Document.
// This includes values selected through modifiers, order, etc.
func (d *Document) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryAnnotations queries the "annotations" edge of the Document entity.
func (d *Document) QueryAnnotations() *AnnotationQuery {
	return NewDocumentClient(d.config).QueryAnnotations(d)
}

// QueryMetadata queries the "metadata" edge of the Document entity.
func (d *Document) QueryMetadata() *MetadataQuery {
	return NewDocumentClient(d.config).QueryMetadata(d)
}

// QueryNodeList queries the "node_list" edge of the Document entity.
func (d *Document) QueryNodeList() *NodeListQuery {
	return NewDocumentClient(d.config).QueryNodeList(d)
}

// Update returns a builder for updating this Document.
// Note that you need to call Document.Unwrap() before calling this method if this Document
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Document) Update() *DocumentUpdateOne {
	return NewDocumentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Document entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Document) Unwrap() *Document {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Document is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Document) String() string {
	var builder strings.Builder
	builder.WriteString("Document(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("metadata_id=")
	builder.WriteString(fmt.Sprintf("%v", d.MetadataID))
	builder.WriteString(", ")
	builder.WriteString("node_list_id=")
	builder.WriteString(fmt.Sprintf("%v", d.NodeListID))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (d *Document) MarshalJSON() ([]byte, error) {
	type Alias Document
	return json.Marshal(&struct {
		*Alias
		DocumentEdges
	}{
		Alias:         (*Alias)(d),
		DocumentEdges: d.Edges,
	})
}

// Documents is a parsable slice of Document.
type Documents []*Document
