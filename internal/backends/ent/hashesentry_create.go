// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/hashesentry"
	"github.com/protobom/storage/internal/backends/ent/node"
)

// HashesEntryCreate is the builder for creating a HashesEntry entity.
type HashesEntryCreate struct {
	config
	mutation *HashesEntryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExternalReferenceID sets the "external_reference_id" field.
func (hec *HashesEntryCreate) SetExternalReferenceID(i int) *HashesEntryCreate {
	hec.mutation.SetExternalReferenceID(i)
	return hec
}

// SetNillableExternalReferenceID sets the "external_reference_id" field if the given value is not nil.
func (hec *HashesEntryCreate) SetNillableExternalReferenceID(i *int) *HashesEntryCreate {
	if i != nil {
		hec.SetExternalReferenceID(*i)
	}
	return hec
}

// SetNodeID sets the "node_id" field.
func (hec *HashesEntryCreate) SetNodeID(s string) *HashesEntryCreate {
	hec.mutation.SetNodeID(s)
	return hec
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (hec *HashesEntryCreate) SetNillableNodeID(s *string) *HashesEntryCreate {
	if s != nil {
		hec.SetNodeID(*s)
	}
	return hec
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (hec *HashesEntryCreate) SetHashAlgorithmType(hat hashesentry.HashAlgorithmType) *HashesEntryCreate {
	hec.mutation.SetHashAlgorithmType(hat)
	return hec
}

// SetHashData sets the "hash_data" field.
func (hec *HashesEntryCreate) SetHashData(s string) *HashesEntryCreate {
	hec.mutation.SetHashData(s)
	return hec
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (hec *HashesEntryCreate) SetDocumentID(id string) *HashesEntryCreate {
	hec.mutation.SetDocumentID(id)
	return hec
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (hec *HashesEntryCreate) SetNillableDocumentID(id *string) *HashesEntryCreate {
	if id != nil {
		hec = hec.SetDocumentID(*id)
	}
	return hec
}

// SetDocument sets the "document" edge to the Document entity.
func (hec *HashesEntryCreate) SetDocument(d *Document) *HashesEntryCreate {
	return hec.SetDocumentID(d.ID)
}

// SetExternalReference sets the "external_reference" edge to the ExternalReference entity.
func (hec *HashesEntryCreate) SetExternalReference(e *ExternalReference) *HashesEntryCreate {
	return hec.SetExternalReferenceID(e.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (hec *HashesEntryCreate) SetNode(n *Node) *HashesEntryCreate {
	return hec.SetNodeID(n.ID)
}

// Mutation returns the HashesEntryMutation object of the builder.
func (hec *HashesEntryCreate) Mutation() *HashesEntryMutation {
	return hec.mutation
}

// Save creates the HashesEntry in the database.
func (hec *HashesEntryCreate) Save(ctx context.Context) (*HashesEntry, error) {
	return withHooks(ctx, hec.sqlSave, hec.mutation, hec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hec *HashesEntryCreate) SaveX(ctx context.Context) *HashesEntry {
	v, err := hec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hec *HashesEntryCreate) Exec(ctx context.Context) error {
	_, err := hec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hec *HashesEntryCreate) ExecX(ctx context.Context) {
	if err := hec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hec *HashesEntryCreate) check() error {
	if _, ok := hec.mutation.HashAlgorithmType(); !ok {
		return &ValidationError{Name: "hash_algorithm_type", err: errors.New(`ent: missing required field "HashesEntry.hash_algorithm_type"`)}
	}
	if v, ok := hec.mutation.HashAlgorithmType(); ok {
		if err := hashesentry.HashAlgorithmTypeValidator(v); err != nil {
			return &ValidationError{Name: "hash_algorithm_type", err: fmt.Errorf(`ent: validator failed for field "HashesEntry.hash_algorithm_type": %w`, err)}
		}
	}
	if _, ok := hec.mutation.HashData(); !ok {
		return &ValidationError{Name: "hash_data", err: errors.New(`ent: missing required field "HashesEntry.hash_data"`)}
	}
	return nil
}

func (hec *HashesEntryCreate) sqlSave(ctx context.Context) (*HashesEntry, error) {
	if err := hec.check(); err != nil {
		return nil, err
	}
	_node, _spec := hec.createSpec()
	if err := sqlgraph.CreateNode(ctx, hec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hec.mutation.id = &_node.ID
	hec.mutation.done = true
	return _node, nil
}

func (hec *HashesEntryCreate) createSpec() (*HashesEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &HashesEntry{config: hec.config}
		_spec = sqlgraph.NewCreateSpec(hashesentry.Table, sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hec.conflict
	if value, ok := hec.mutation.HashAlgorithmType(); ok {
		_spec.SetField(hashesentry.FieldHashAlgorithmType, field.TypeEnum, value)
		_node.HashAlgorithmType = value
	}
	if value, ok := hec.mutation.HashData(); ok {
		_spec.SetField(hashesentry.FieldHashData, field.TypeString, value)
		_node.HashData = value
	}
	if nodes := hec.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashesentry.DocumentTable,
			Columns: []string{hashesentry.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.ExternalReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hashesentry.ExternalReferenceTable,
			Columns: []string{hashesentry.ExternalReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExternalReferenceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hashesentry.NodeTable,
			Columns: []string{hashesentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HashesEntry.Create().
//		SetExternalReferenceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HashesEntryUpsert) {
//			SetExternalReferenceID(v+v).
//		}).
//		Exec(ctx)
func (hec *HashesEntryCreate) OnConflict(opts ...sql.ConflictOption) *HashesEntryUpsertOne {
	hec.conflict = opts
	return &HashesEntryUpsertOne{
		create: hec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hec *HashesEntryCreate) OnConflictColumns(columns ...string) *HashesEntryUpsertOne {
	hec.conflict = append(hec.conflict, sql.ConflictColumns(columns...))
	return &HashesEntryUpsertOne{
		create: hec,
	}
}

type (
	// HashesEntryUpsertOne is the builder for "upsert"-ing
	//  one HashesEntry node.
	HashesEntryUpsertOne struct {
		create *HashesEntryCreate
	}

	// HashesEntryUpsert is the "OnConflict" setter.
	HashesEntryUpsert struct {
		*sql.UpdateSet
	}
)

// SetExternalReferenceID sets the "external_reference_id" field.
func (u *HashesEntryUpsert) SetExternalReferenceID(v int) *HashesEntryUpsert {
	u.Set(hashesentry.FieldExternalReferenceID, v)
	return u
}

// UpdateExternalReferenceID sets the "external_reference_id" field to the value that was provided on create.
func (u *HashesEntryUpsert) UpdateExternalReferenceID() *HashesEntryUpsert {
	u.SetExcluded(hashesentry.FieldExternalReferenceID)
	return u
}

// ClearExternalReferenceID clears the value of the "external_reference_id" field.
func (u *HashesEntryUpsert) ClearExternalReferenceID() *HashesEntryUpsert {
	u.SetNull(hashesentry.FieldExternalReferenceID)
	return u
}

// SetNodeID sets the "node_id" field.
func (u *HashesEntryUpsert) SetNodeID(v string) *HashesEntryUpsert {
	u.Set(hashesentry.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *HashesEntryUpsert) UpdateNodeID() *HashesEntryUpsert {
	u.SetExcluded(hashesentry.FieldNodeID)
	return u
}

// ClearNodeID clears the value of the "node_id" field.
func (u *HashesEntryUpsert) ClearNodeID() *HashesEntryUpsert {
	u.SetNull(hashesentry.FieldNodeID)
	return u
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (u *HashesEntryUpsert) SetHashAlgorithmType(v hashesentry.HashAlgorithmType) *HashesEntryUpsert {
	u.Set(hashesentry.FieldHashAlgorithmType, v)
	return u
}

// UpdateHashAlgorithmType sets the "hash_algorithm_type" field to the value that was provided on create.
func (u *HashesEntryUpsert) UpdateHashAlgorithmType() *HashesEntryUpsert {
	u.SetExcluded(hashesentry.FieldHashAlgorithmType)
	return u
}

// SetHashData sets the "hash_data" field.
func (u *HashesEntryUpsert) SetHashData(v string) *HashesEntryUpsert {
	u.Set(hashesentry.FieldHashData, v)
	return u
}

// UpdateHashData sets the "hash_data" field to the value that was provided on create.
func (u *HashesEntryUpsert) UpdateHashData() *HashesEntryUpsert {
	u.SetExcluded(hashesentry.FieldHashData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HashesEntryUpsertOne) UpdateNewValues() *HashesEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HashesEntryUpsertOne) Ignore() *HashesEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HashesEntryUpsertOne) DoNothing() *HashesEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HashesEntryCreate.OnConflict
// documentation for more info.
func (u *HashesEntryUpsertOne) Update(set func(*HashesEntryUpsert)) *HashesEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HashesEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalReferenceID sets the "external_reference_id" field.
func (u *HashesEntryUpsertOne) SetExternalReferenceID(v int) *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetExternalReferenceID(v)
	})
}

// UpdateExternalReferenceID sets the "external_reference_id" field to the value that was provided on create.
func (u *HashesEntryUpsertOne) UpdateExternalReferenceID() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateExternalReferenceID()
	})
}

// ClearExternalReferenceID clears the value of the "external_reference_id" field.
func (u *HashesEntryUpsertOne) ClearExternalReferenceID() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.ClearExternalReferenceID()
	})
}

// SetNodeID sets the "node_id" field.
func (u *HashesEntryUpsertOne) SetNodeID(v string) *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *HashesEntryUpsertOne) UpdateNodeID() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateNodeID()
	})
}

// ClearNodeID clears the value of the "node_id" field.
func (u *HashesEntryUpsertOne) ClearNodeID() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.ClearNodeID()
	})
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (u *HashesEntryUpsertOne) SetHashAlgorithmType(v hashesentry.HashAlgorithmType) *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetHashAlgorithmType(v)
	})
}

// UpdateHashAlgorithmType sets the "hash_algorithm_type" field to the value that was provided on create.
func (u *HashesEntryUpsertOne) UpdateHashAlgorithmType() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateHashAlgorithmType()
	})
}

// SetHashData sets the "hash_data" field.
func (u *HashesEntryUpsertOne) SetHashData(v string) *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetHashData(v)
	})
}

// UpdateHashData sets the "hash_data" field to the value that was provided on create.
func (u *HashesEntryUpsertOne) UpdateHashData() *HashesEntryUpsertOne {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateHashData()
	})
}

// Exec executes the query.
func (u *HashesEntryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HashesEntryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HashesEntryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HashesEntryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HashesEntryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HashesEntryCreateBulk is the builder for creating many HashesEntry entities in bulk.
type HashesEntryCreateBulk struct {
	config
	err      error
	builders []*HashesEntryCreate
	conflict []sql.ConflictOption
}

// Save creates the HashesEntry entities in the database.
func (hecb *HashesEntryCreateBulk) Save(ctx context.Context) ([]*HashesEntry, error) {
	if hecb.err != nil {
		return nil, hecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hecb.builders))
	nodes := make([]*HashesEntry, len(hecb.builders))
	mutators := make([]Mutator, len(hecb.builders))
	for i := range hecb.builders {
		func(i int, root context.Context) {
			builder := hecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HashesEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hecb *HashesEntryCreateBulk) SaveX(ctx context.Context) []*HashesEntry {
	v, err := hecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hecb *HashesEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := hecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hecb *HashesEntryCreateBulk) ExecX(ctx context.Context) {
	if err := hecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HashesEntry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HashesEntryUpsert) {
//			SetExternalReferenceID(v+v).
//		}).
//		Exec(ctx)
func (hecb *HashesEntryCreateBulk) OnConflict(opts ...sql.ConflictOption) *HashesEntryUpsertBulk {
	hecb.conflict = opts
	return &HashesEntryUpsertBulk{
		create: hecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hecb *HashesEntryCreateBulk) OnConflictColumns(columns ...string) *HashesEntryUpsertBulk {
	hecb.conflict = append(hecb.conflict, sql.ConflictColumns(columns...))
	return &HashesEntryUpsertBulk{
		create: hecb,
	}
}

// HashesEntryUpsertBulk is the builder for "upsert"-ing
// a bulk of HashesEntry nodes.
type HashesEntryUpsertBulk struct {
	create *HashesEntryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HashesEntryUpsertBulk) UpdateNewValues() *HashesEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HashesEntry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HashesEntryUpsertBulk) Ignore() *HashesEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HashesEntryUpsertBulk) DoNothing() *HashesEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HashesEntryCreateBulk.OnConflict
// documentation for more info.
func (u *HashesEntryUpsertBulk) Update(set func(*HashesEntryUpsert)) *HashesEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HashesEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalReferenceID sets the "external_reference_id" field.
func (u *HashesEntryUpsertBulk) SetExternalReferenceID(v int) *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetExternalReferenceID(v)
	})
}

// UpdateExternalReferenceID sets the "external_reference_id" field to the value that was provided on create.
func (u *HashesEntryUpsertBulk) UpdateExternalReferenceID() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateExternalReferenceID()
	})
}

// ClearExternalReferenceID clears the value of the "external_reference_id" field.
func (u *HashesEntryUpsertBulk) ClearExternalReferenceID() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.ClearExternalReferenceID()
	})
}

// SetNodeID sets the "node_id" field.
func (u *HashesEntryUpsertBulk) SetNodeID(v string) *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *HashesEntryUpsertBulk) UpdateNodeID() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateNodeID()
	})
}

// ClearNodeID clears the value of the "node_id" field.
func (u *HashesEntryUpsertBulk) ClearNodeID() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.ClearNodeID()
	})
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (u *HashesEntryUpsertBulk) SetHashAlgorithmType(v hashesentry.HashAlgorithmType) *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetHashAlgorithmType(v)
	})
}

// UpdateHashAlgorithmType sets the "hash_algorithm_type" field to the value that was provided on create.
func (u *HashesEntryUpsertBulk) UpdateHashAlgorithmType() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateHashAlgorithmType()
	})
}

// SetHashData sets the "hash_data" field.
func (u *HashesEntryUpsertBulk) SetHashData(v string) *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.SetHashData(v)
	})
}

// UpdateHashData sets the "hash_data" field to the value that was provided on create.
func (u *HashesEntryUpsertBulk) UpdateHashData() *HashesEntryUpsertBulk {
	return u.Update(func(s *HashesEntryUpsert) {
		s.UpdateHashData()
	})
}

// Exec executes the query.
func (u *HashesEntryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HashesEntryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HashesEntryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HashesEntryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
