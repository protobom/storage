// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package documenttype

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the documenttype type in the database.
	Label = "document_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDocumentID holds the string denoting the document_id field in the database.
	FieldDocumentID = "document_id"
	// FieldProtoMessage holds the string denoting the proto_message field in the database.
	FieldProtoMessage = "proto_message"
	// FieldMetadataID holds the string denoting the metadata_id field in the database.
	FieldMetadataID = "metadata_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// Table holds the table name of the documenttype in the database.
	Table = "document_types"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "document_types"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "document_id"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "document_types"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "metadata_id"
)

// Columns holds all SQL columns for documenttype fields.
var Columns = []string{
	FieldID,
	FieldDocumentID,
	FieldProtoMessage,
	FieldMetadataID,
	FieldType,
	FieldName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/protobom/storage/internal/backends/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultDocumentID holds the default value on creation for the "document_id" field.
	DefaultDocumentID func() uuid.UUID
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeOTHER       Type = "OTHER"
	TypeDESIGN      Type = "DESIGN"
	TypeSOURCE      Type = "SOURCE"
	TypeBUILD       Type = "BUILD"
	TypeANALYZED    Type = "ANALYZED"
	TypeDEPLOYED    Type = "DEPLOYED"
	TypeRUNTIME     Type = "RUNTIME"
	TypeDISCOVERY   Type = "DISCOVERY"
	TypeDECOMISSION Type = "DECOMISSION"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeOTHER, TypeDESIGN, TypeSOURCE, TypeBUILD, TypeANALYZED, TypeDEPLOYED, TypeRUNTIME, TypeDISCOVERY, TypeDECOMISSION:
		return nil
	default:
		return fmt.Errorf("documenttype: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the DocumentType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDocumentID orders the results by the document_id field.
func ByDocumentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentID, opts...).ToFunc()
}

// ByMetadataID orders the results by the metadata_id field.
func ByMetadataID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadataID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDocumentField orders the results by document field.
func ByDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), sql.OrderByField(field, opts...))
	}
}

// ByMetadataField orders the results by metadata field.
func ByMetadataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataStep(), sql.OrderByField(field, opts...))
	}
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DocumentTable, DocumentColumn),
	)
}
func newMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MetadataTable, MetadataColumn),
	)
}
