// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/metadata"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/person"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetIsOrg sets the "is_org" field.
func (pu *PersonUpdate) SetIsOrg(b bool) *PersonUpdate {
	pu.mutation.SetIsOrg(b)
	return pu
}

// SetNillableIsOrg sets the "is_org" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIsOrg(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetIsOrg(*b)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *PersonUpdate) SetEmail(s string) *PersonUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEmail(s *string) *PersonUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// SetURL sets the "url" field.
func (pu *PersonUpdate) SetURL(s string) *PersonUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableURL(s *string) *PersonUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PersonUpdate) SetPhone(s string) *PersonUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePhone(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Person entity by IDs.
func (pu *PersonUpdate) AddContactOwnerIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.AddContactOwnerIDs(ids...)
	return pu
}

// AddContactOwner adds the "contact_owner" edges to the Person entity.
func (pu *PersonUpdate) AddContactOwner(p ...*Person) *PersonUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddContactOwnerIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Person entity by IDs.
func (pu *PersonUpdate) AddContactIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.AddContactIDs(ids...)
	return pu
}

// AddContacts adds the "contacts" edges to the Person entity.
func (pu *PersonUpdate) AddContacts(p ...*Person) *PersonUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddContactIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (pu *PersonUpdate) AddMetadatumIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.AddMetadatumIDs(ids...)
	return pu
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (pu *PersonUpdate) AddMetadata(m ...*Metadata) *PersonUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMetadatumIDs(ids...)
}

// AddOriginatorNodeIDs adds the "originator_nodes" edge to the Node entity by IDs.
func (pu *PersonUpdate) AddOriginatorNodeIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.AddOriginatorNodeIDs(ids...)
	return pu
}

// AddOriginatorNodes adds the "originator_nodes" edges to the Node entity.
func (pu *PersonUpdate) AddOriginatorNodes(n ...*Node) *PersonUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddOriginatorNodeIDs(ids...)
}

// AddSupplierNodeIDs adds the "supplier_nodes" edge to the Node entity by IDs.
func (pu *PersonUpdate) AddSupplierNodeIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.AddSupplierNodeIDs(ids...)
	return pu
}

// AddSupplierNodes adds the "supplier_nodes" edges to the Node entity.
func (pu *PersonUpdate) AddSupplierNodes(n ...*Node) *PersonUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddSupplierNodeIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearContactOwner clears all "contact_owner" edges to the Person entity.
func (pu *PersonUpdate) ClearContactOwner() *PersonUpdate {
	pu.mutation.ClearContactOwner()
	return pu
}

// RemoveContactOwnerIDs removes the "contact_owner" edge to Person entities by IDs.
func (pu *PersonUpdate) RemoveContactOwnerIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.RemoveContactOwnerIDs(ids...)
	return pu
}

// RemoveContactOwner removes "contact_owner" edges to Person entities.
func (pu *PersonUpdate) RemoveContactOwner(p ...*Person) *PersonUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveContactOwnerIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Person entity.
func (pu *PersonUpdate) ClearContacts() *PersonUpdate {
	pu.mutation.ClearContacts()
	return pu
}

// RemoveContactIDs removes the "contacts" edge to Person entities by IDs.
func (pu *PersonUpdate) RemoveContactIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.RemoveContactIDs(ids...)
	return pu
}

// RemoveContacts removes "contacts" edges to Person entities.
func (pu *PersonUpdate) RemoveContacts(p ...*Person) *PersonUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveContactIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (pu *PersonUpdate) ClearMetadata() *PersonUpdate {
	pu.mutation.ClearMetadata()
	return pu
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (pu *PersonUpdate) RemoveMetadatumIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.RemoveMetadatumIDs(ids...)
	return pu
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (pu *PersonUpdate) RemoveMetadata(m ...*Metadata) *PersonUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMetadatumIDs(ids...)
}

// ClearOriginatorNodes clears all "originator_nodes" edges to the Node entity.
func (pu *PersonUpdate) ClearOriginatorNodes() *PersonUpdate {
	pu.mutation.ClearOriginatorNodes()
	return pu
}

// RemoveOriginatorNodeIDs removes the "originator_nodes" edge to Node entities by IDs.
func (pu *PersonUpdate) RemoveOriginatorNodeIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.RemoveOriginatorNodeIDs(ids...)
	return pu
}

// RemoveOriginatorNodes removes "originator_nodes" edges to Node entities.
func (pu *PersonUpdate) RemoveOriginatorNodes(n ...*Node) *PersonUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveOriginatorNodeIDs(ids...)
}

// ClearSupplierNodes clears all "supplier_nodes" edges to the Node entity.
func (pu *PersonUpdate) ClearSupplierNodes() *PersonUpdate {
	pu.mutation.ClearSupplierNodes()
	return pu
}

// RemoveSupplierNodeIDs removes the "supplier_nodes" edge to Node entities by IDs.
func (pu *PersonUpdate) RemoveSupplierNodeIDs(ids ...uuid.UUID) *PersonUpdate {
	pu.mutation.RemoveSupplierNodeIDs(ids...)
	return pu
}

// RemoveSupplierNodes removes "supplier_nodes" edges to Node entities.
func (pu *PersonUpdate) RemoveSupplierNodes(n ...*Node) *PersonUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveSupplierNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsOrg(); ok {
		_spec.SetField(person.FieldIsOrg, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(person.FieldURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(person.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContactOwnerIDs(); len(nodes) > 0 && !pu.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContactOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !pu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !pu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OriginatorNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOriginatorNodesIDs(); len(nodes) > 0 && !pu.mutation.OriginatorNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OriginatorNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SupplierNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSupplierNodesIDs(); len(nodes) > 0 && !pu.mutation.SupplierNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SupplierNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetIsOrg sets the "is_org" field.
func (puo *PersonUpdateOne) SetIsOrg(b bool) *PersonUpdateOne {
	puo.mutation.SetIsOrg(b)
	return puo
}

// SetNillableIsOrg sets the "is_org" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIsOrg(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetIsOrg(*b)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *PersonUpdateOne) SetEmail(s string) *PersonUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEmail(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// SetURL sets the "url" field.
func (puo *PersonUpdateOne) SetURL(s string) *PersonUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableURL(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PersonUpdateOne) SetPhone(s string) *PersonUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePhone(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Person entity by IDs.
func (puo *PersonUpdateOne) AddContactOwnerIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.AddContactOwnerIDs(ids...)
	return puo
}

// AddContactOwner adds the "contact_owner" edges to the Person entity.
func (puo *PersonUpdateOne) AddContactOwner(p ...*Person) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddContactOwnerIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Person entity by IDs.
func (puo *PersonUpdateOne) AddContactIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.AddContactIDs(ids...)
	return puo
}

// AddContacts adds the "contacts" edges to the Person entity.
func (puo *PersonUpdateOne) AddContacts(p ...*Person) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddContactIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (puo *PersonUpdateOne) AddMetadatumIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.AddMetadatumIDs(ids...)
	return puo
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (puo *PersonUpdateOne) AddMetadata(m ...*Metadata) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMetadatumIDs(ids...)
}

// AddOriginatorNodeIDs adds the "originator_nodes" edge to the Node entity by IDs.
func (puo *PersonUpdateOne) AddOriginatorNodeIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.AddOriginatorNodeIDs(ids...)
	return puo
}

// AddOriginatorNodes adds the "originator_nodes" edges to the Node entity.
func (puo *PersonUpdateOne) AddOriginatorNodes(n ...*Node) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddOriginatorNodeIDs(ids...)
}

// AddSupplierNodeIDs adds the "supplier_nodes" edge to the Node entity by IDs.
func (puo *PersonUpdateOne) AddSupplierNodeIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.AddSupplierNodeIDs(ids...)
	return puo
}

// AddSupplierNodes adds the "supplier_nodes" edges to the Node entity.
func (puo *PersonUpdateOne) AddSupplierNodes(n ...*Node) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddSupplierNodeIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearContactOwner clears all "contact_owner" edges to the Person entity.
func (puo *PersonUpdateOne) ClearContactOwner() *PersonUpdateOne {
	puo.mutation.ClearContactOwner()
	return puo
}

// RemoveContactOwnerIDs removes the "contact_owner" edge to Person entities by IDs.
func (puo *PersonUpdateOne) RemoveContactOwnerIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.RemoveContactOwnerIDs(ids...)
	return puo
}

// RemoveContactOwner removes "contact_owner" edges to Person entities.
func (puo *PersonUpdateOne) RemoveContactOwner(p ...*Person) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveContactOwnerIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Person entity.
func (puo *PersonUpdateOne) ClearContacts() *PersonUpdateOne {
	puo.mutation.ClearContacts()
	return puo
}

// RemoveContactIDs removes the "contacts" edge to Person entities by IDs.
func (puo *PersonUpdateOne) RemoveContactIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.RemoveContactIDs(ids...)
	return puo
}

// RemoveContacts removes "contacts" edges to Person entities.
func (puo *PersonUpdateOne) RemoveContacts(p ...*Person) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveContactIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (puo *PersonUpdateOne) ClearMetadata() *PersonUpdateOne {
	puo.mutation.ClearMetadata()
	return puo
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (puo *PersonUpdateOne) RemoveMetadatumIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.RemoveMetadatumIDs(ids...)
	return puo
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (puo *PersonUpdateOne) RemoveMetadata(m ...*Metadata) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMetadatumIDs(ids...)
}

// ClearOriginatorNodes clears all "originator_nodes" edges to the Node entity.
func (puo *PersonUpdateOne) ClearOriginatorNodes() *PersonUpdateOne {
	puo.mutation.ClearOriginatorNodes()
	return puo
}

// RemoveOriginatorNodeIDs removes the "originator_nodes" edge to Node entities by IDs.
func (puo *PersonUpdateOne) RemoveOriginatorNodeIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.RemoveOriginatorNodeIDs(ids...)
	return puo
}

// RemoveOriginatorNodes removes "originator_nodes" edges to Node entities.
func (puo *PersonUpdateOne) RemoveOriginatorNodes(n ...*Node) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveOriginatorNodeIDs(ids...)
}

// ClearSupplierNodes clears all "supplier_nodes" edges to the Node entity.
func (puo *PersonUpdateOne) ClearSupplierNodes() *PersonUpdateOne {
	puo.mutation.ClearSupplierNodes()
	return puo
}

// RemoveSupplierNodeIDs removes the "supplier_nodes" edge to Node entities by IDs.
func (puo *PersonUpdateOne) RemoveSupplierNodeIDs(ids ...uuid.UUID) *PersonUpdateOne {
	puo.mutation.RemoveSupplierNodeIDs(ids...)
	return puo
}

// RemoveSupplierNodes removes "supplier_nodes" edges to Node entities.
func (puo *PersonUpdateOne) RemoveSupplierNodes(n ...*Node) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveSupplierNodeIDs(ids...)
}

// Where appends a list predicates to the PersonUpdate builder.
func (puo *PersonUpdateOne) Where(ps ...predicate.Person) *PersonUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsOrg(); ok {
		_spec.SetField(person.FieldIsOrg, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(person.FieldURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(person.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContactOwnerIDs(); len(nodes) > 0 && !puo.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContactOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.ContactOwnerTable,
			Columns: person.ContactOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !puo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: person.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !puo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.MetadataTable,
			Columns: person.MetadataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OriginatorNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOriginatorNodesIDs(); len(nodes) > 0 && !puo.mutation.OriginatorNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OriginatorNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.OriginatorNodesTable,
			Columns: person.OriginatorNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SupplierNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSupplierNodesIDs(); len(nodes) > 0 && !puo.mutation.SupplierNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SupplierNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.SupplierNodesTable,
			Columns: person.SupplierNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
