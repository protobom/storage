// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/annotation"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// AnnotationUpdate is the builder for updating Annotation entities.
type AnnotationUpdate struct {
	config
	hooks    []Hook
	mutation *AnnotationMutation
}

// Where appends a list predicates to the AnnotationUpdate builder.
func (au *AnnotationUpdate) Where(ps ...predicate.Annotation) *AnnotationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDocumentID sets the "document_id" field.
func (au *AnnotationUpdate) SetDocumentID(u uuid.UUID) *AnnotationUpdate {
	au.mutation.SetDocumentID(u)
	return au
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableDocumentID(u *uuid.UUID) *AnnotationUpdate {
	if u != nil {
		au.SetDocumentID(*u)
	}
	return au
}

// ClearDocumentID clears the value of the "document_id" field.
func (au *AnnotationUpdate) ClearDocumentID() *AnnotationUpdate {
	au.mutation.ClearDocumentID()
	return au
}

// SetNodeID sets the "node_id" field.
func (au *AnnotationUpdate) SetNodeID(u uuid.UUID) *AnnotationUpdate {
	au.mutation.SetNodeID(u)
	return au
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableNodeID(u *uuid.UUID) *AnnotationUpdate {
	if u != nil {
		au.SetNodeID(*u)
	}
	return au
}

// ClearNodeID clears the value of the "node_id" field.
func (au *AnnotationUpdate) ClearNodeID() *AnnotationUpdate {
	au.mutation.ClearNodeID()
	return au
}

// SetName sets the "name" field.
func (au *AnnotationUpdate) SetName(s string) *AnnotationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableName(s *string) *AnnotationUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetValue sets the "value" field.
func (au *AnnotationUpdate) SetValue(s string) *AnnotationUpdate {
	au.mutation.SetValue(s)
	return au
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableValue(s *string) *AnnotationUpdate {
	if s != nil {
		au.SetValue(*s)
	}
	return au
}

// SetIsUnique sets the "is_unique" field.
func (au *AnnotationUpdate) SetIsUnique(b bool) *AnnotationUpdate {
	au.mutation.SetIsUnique(b)
	return au
}

// SetNillableIsUnique sets the "is_unique" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableIsUnique(b *bool) *AnnotationUpdate {
	if b != nil {
		au.SetIsUnique(*b)
	}
	return au
}

// SetDocument sets the "document" edge to the Document entity.
func (au *AnnotationUpdate) SetDocument(d *Document) *AnnotationUpdate {
	return au.SetDocumentID(d.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (au *AnnotationUpdate) SetNode(n *Node) *AnnotationUpdate {
	return au.SetNodeID(n.ID)
}

// Mutation returns the AnnotationMutation object of the builder.
func (au *AnnotationUpdate) Mutation() *AnnotationMutation {
	return au.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (au *AnnotationUpdate) ClearDocument() *AnnotationUpdate {
	au.mutation.ClearDocument()
	return au
}

// ClearNode clears the "node" edge to the Node entity.
func (au *AnnotationUpdate) ClearNode() *AnnotationUpdate {
	au.mutation.ClearNode()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnotationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnotationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(annotation.Table, annotation.Columns, sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(annotation.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(annotation.FieldValue, field.TypeString, value)
	}
	if value, ok := au.mutation.IsUnique(); ok {
		_spec.SetField(annotation.FieldIsUnique, field.TypeBool, value)
	}
	if au.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.DocumentTable,
			Columns: []string{annotation.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.DocumentTable,
			Columns: []string{annotation.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.NodeTable,
			Columns: []string{annotation.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.NodeTable,
			Columns: []string{annotation.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnnotationUpdateOne is the builder for updating a single Annotation entity.
type AnnotationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnotationMutation
}

// SetDocumentID sets the "document_id" field.
func (auo *AnnotationUpdateOne) SetDocumentID(u uuid.UUID) *AnnotationUpdateOne {
	auo.mutation.SetDocumentID(u)
	return auo
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableDocumentID(u *uuid.UUID) *AnnotationUpdateOne {
	if u != nil {
		auo.SetDocumentID(*u)
	}
	return auo
}

// ClearDocumentID clears the value of the "document_id" field.
func (auo *AnnotationUpdateOne) ClearDocumentID() *AnnotationUpdateOne {
	auo.mutation.ClearDocumentID()
	return auo
}

// SetNodeID sets the "node_id" field.
func (auo *AnnotationUpdateOne) SetNodeID(u uuid.UUID) *AnnotationUpdateOne {
	auo.mutation.SetNodeID(u)
	return auo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableNodeID(u *uuid.UUID) *AnnotationUpdateOne {
	if u != nil {
		auo.SetNodeID(*u)
	}
	return auo
}

// ClearNodeID clears the value of the "node_id" field.
func (auo *AnnotationUpdateOne) ClearNodeID() *AnnotationUpdateOne {
	auo.mutation.ClearNodeID()
	return auo
}

// SetName sets the "name" field.
func (auo *AnnotationUpdateOne) SetName(s string) *AnnotationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableName(s *string) *AnnotationUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetValue sets the "value" field.
func (auo *AnnotationUpdateOne) SetValue(s string) *AnnotationUpdateOne {
	auo.mutation.SetValue(s)
	return auo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableValue(s *string) *AnnotationUpdateOne {
	if s != nil {
		auo.SetValue(*s)
	}
	return auo
}

// SetIsUnique sets the "is_unique" field.
func (auo *AnnotationUpdateOne) SetIsUnique(b bool) *AnnotationUpdateOne {
	auo.mutation.SetIsUnique(b)
	return auo
}

// SetNillableIsUnique sets the "is_unique" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableIsUnique(b *bool) *AnnotationUpdateOne {
	if b != nil {
		auo.SetIsUnique(*b)
	}
	return auo
}

// SetDocument sets the "document" edge to the Document entity.
func (auo *AnnotationUpdateOne) SetDocument(d *Document) *AnnotationUpdateOne {
	return auo.SetDocumentID(d.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (auo *AnnotationUpdateOne) SetNode(n *Node) *AnnotationUpdateOne {
	return auo.SetNodeID(n.ID)
}

// Mutation returns the AnnotationMutation object of the builder.
func (auo *AnnotationUpdateOne) Mutation() *AnnotationMutation {
	return auo.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (auo *AnnotationUpdateOne) ClearDocument() *AnnotationUpdateOne {
	auo.mutation.ClearDocument()
	return auo
}

// ClearNode clears the "node" edge to the Node entity.
func (auo *AnnotationUpdateOne) ClearNode() *AnnotationUpdateOne {
	auo.mutation.ClearNode()
	return auo
}

// Where appends a list predicates to the AnnotationUpdate builder.
func (auo *AnnotationUpdateOne) Where(ps ...predicate.Annotation) *AnnotationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnotationUpdateOne) Select(field string, fields ...string) *AnnotationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Annotation entity.
func (auo *AnnotationUpdateOne) Save(ctx context.Context) (*Annotation, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnotationUpdateOne) SaveX(ctx context.Context) *Annotation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AnnotationUpdateOne) sqlSave(ctx context.Context) (_node *Annotation, err error) {
	_spec := sqlgraph.NewUpdateSpec(annotation.Table, annotation.Columns, sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Annotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, annotation.FieldID)
		for _, f := range fields {
			if !annotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != annotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(annotation.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(annotation.FieldValue, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsUnique(); ok {
		_spec.SetField(annotation.FieldIsUnique, field.TypeBool, value)
	}
	if auo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.DocumentTable,
			Columns: []string{annotation.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.DocumentTable,
			Columns: []string{annotation.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.NodeTable,
			Columns: []string{annotation.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.NodeTable,
			Columns: []string{annotation.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Annotation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
