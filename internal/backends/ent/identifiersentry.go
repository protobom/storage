// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/identifiersentry"
)

// IdentifiersEntry is the model entity for the IdentifiersEntry schema.
type IdentifiersEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// DocumentID holds the value of the "document_id" field.
	DocumentID uuid.UUID `json:"-"`
	// Type holds the value of the "type" field.
	Type identifiersentry.Type `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdentifiersEntryQuery when eager-loading is set.
	Edges        IdentifiersEntryEdges `json:"-"`
	selectValues sql.SelectValues
}

// IdentifiersEntryEdges holds the relations/edges for other nodes in the graph.
type IdentifiersEntryEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Nodes holds the value of the nodes edge.
	Nodes []*Node `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdentifiersEntryEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// NodesOrErr returns the Nodes value or an error if the edge
// was not loaded in eager-loading.
func (e IdentifiersEntryEdges) NodesOrErr() ([]*Node, error) {
	if e.loadedTypes[1] {
		return e.Nodes, nil
	}
	return nil, &NotLoadedError{edge: "nodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentifiersEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identifiersentry.FieldType, identifiersentry.FieldValue:
			values[i] = new(sql.NullString)
		case identifiersentry.FieldID, identifiersentry.FieldDocumentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentifiersEntry fields.
func (ie *IdentifiersEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identifiersentry.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ie.ID = *value
			}
		case identifiersentry.FieldDocumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_id", values[i])
			} else if value != nil {
				ie.DocumentID = *value
			}
		case identifiersentry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ie.Type = identifiersentry.Type(value.String)
			}
		case identifiersentry.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ie.Value = value.String
			}
		default:
			ie.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the IdentifiersEntry.
// This includes values selected through modifiers, order, etc.
func (ie *IdentifiersEntry) GetValue(name string) (ent.Value, error) {
	return ie.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the IdentifiersEntry entity.
func (ie *IdentifiersEntry) QueryDocument() *DocumentQuery {
	return NewIdentifiersEntryClient(ie.config).QueryDocument(ie)
}

// QueryNodes queries the "nodes" edge of the IdentifiersEntry entity.
func (ie *IdentifiersEntry) QueryNodes() *NodeQuery {
	return NewIdentifiersEntryClient(ie.config).QueryNodes(ie)
}

// Update returns a builder for updating this IdentifiersEntry.
// Note that you need to call IdentifiersEntry.Unwrap() before calling this method if this IdentifiersEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (ie *IdentifiersEntry) Update() *IdentifiersEntryUpdateOne {
	return NewIdentifiersEntryClient(ie.config).UpdateOne(ie)
}

// Unwrap unwraps the IdentifiersEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ie *IdentifiersEntry) Unwrap() *IdentifiersEntry {
	_tx, ok := ie.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdentifiersEntry is not a transactional entity")
	}
	ie.config.driver = _tx.drv
	return ie
}

// String implements the fmt.Stringer.
func (ie *IdentifiersEntry) String() string {
	var builder strings.Builder
	builder.WriteString("IdentifiersEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ie.ID))
	builder.WriteString("document_id=")
	builder.WriteString(fmt.Sprintf("%v", ie.DocumentID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ie.Type))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ie.Value)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ie *IdentifiersEntry) MarshalJSON() ([]byte, error) {
	type Alias IdentifiersEntry
	return json.Marshal(&struct {
		*Alias
		IdentifiersEntryEdges
	}{
		Alias:                 (*Alias)(ie),
		IdentifiersEntryEdges: ie.Edges,
	})
}

// IdentifiersEntries is a parsable slice of IdentifiersEntry.
type IdentifiersEntries []*IdentifiersEntry
