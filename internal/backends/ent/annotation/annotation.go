// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package annotation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the annotation type in the database.
	Label = "annotation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDocumentID holds the string denoting the document_id field in the database.
	FieldDocumentID = "document_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldIsUnique holds the string denoting the is_unique field in the database.
	FieldIsUnique = "is_unique"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// Table holds the table name of the annotation in the database.
	Table = "annotations"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "annotations"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "document_id"
)

// Columns holds all SQL columns for annotation fields.
var Columns = []string{
	FieldID,
	FieldDocumentID,
	FieldName,
	FieldValue,
	FieldIsUnique,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDocumentID holds the default value on creation for the "document_id" field.
	DefaultDocumentID func() uuid.UUID
	// DefaultIsUnique holds the default value on creation for the "is_unique" field.
	DefaultIsUnique bool
)

// OrderOption defines the ordering options for the Annotation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDocumentID orders the results by the document_id field.
func ByDocumentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByIsUnique orders the results by the is_unique field.
func ByIsUnique(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUnique, opts...).ToFunc()
}

// ByDocumentField orders the results by document field.
func ByDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), sql.OrderByField(field, opts...))
	}
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DocumentTable, DocumentColumn),
	)
}
