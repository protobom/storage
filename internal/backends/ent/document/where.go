// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package document

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// MetadataID applies equality check predicate on the "metadata_id" field. It's identical to MetadataIDEQ.
func MetadataID(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldMetadataID, v))
}

// NodeListID applies equality check predicate on the "node_list_id" field. It's identical to NodeListIDEQ.
func NodeListID(v uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldNodeListID, v))
}

// MetadataIDEQ applies the EQ predicate on the "metadata_id" field.
func MetadataIDEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldMetadataID, v))
}

// MetadataIDNEQ applies the NEQ predicate on the "metadata_id" field.
func MetadataIDNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldMetadataID, v))
}

// MetadataIDIn applies the In predicate on the "metadata_id" field.
func MetadataIDIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldMetadataID, vs...))
}

// MetadataIDNotIn applies the NotIn predicate on the "metadata_id" field.
func MetadataIDNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldMetadataID, vs...))
}

// MetadataIDGT applies the GT predicate on the "metadata_id" field.
func MetadataIDGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldMetadataID, v))
}

// MetadataIDGTE applies the GTE predicate on the "metadata_id" field.
func MetadataIDGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldMetadataID, v))
}

// MetadataIDLT applies the LT predicate on the "metadata_id" field.
func MetadataIDLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldMetadataID, v))
}

// MetadataIDLTE applies the LTE predicate on the "metadata_id" field.
func MetadataIDLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldMetadataID, v))
}

// MetadataIDContains applies the Contains predicate on the "metadata_id" field.
func MetadataIDContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldMetadataID, v))
}

// MetadataIDHasPrefix applies the HasPrefix predicate on the "metadata_id" field.
func MetadataIDHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldMetadataID, v))
}

// MetadataIDHasSuffix applies the HasSuffix predicate on the "metadata_id" field.
func MetadataIDHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldMetadataID, v))
}

// MetadataIDIsNil applies the IsNil predicate on the "metadata_id" field.
func MetadataIDIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldMetadataID))
}

// MetadataIDNotNil applies the NotNil predicate on the "metadata_id" field.
func MetadataIDNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldMetadataID))
}

// MetadataIDEqualFold applies the EqualFold predicate on the "metadata_id" field.
func MetadataIDEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldMetadataID, v))
}

// MetadataIDContainsFold applies the ContainsFold predicate on the "metadata_id" field.
func MetadataIDContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldMetadataID, v))
}

// NodeListIDEQ applies the EQ predicate on the "node_list_id" field.
func NodeListIDEQ(v uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldNodeListID, v))
}

// NodeListIDNEQ applies the NEQ predicate on the "node_list_id" field.
func NodeListIDNEQ(v uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldNodeListID, v))
}

// NodeListIDIn applies the In predicate on the "node_list_id" field.
func NodeListIDIn(vs ...uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldNodeListID, vs...))
}

// NodeListIDNotIn applies the NotIn predicate on the "node_list_id" field.
func NodeListIDNotIn(vs ...uuid.UUID) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldNodeListID, vs...))
}

// NodeListIDIsNil applies the IsNil predicate on the "node_list_id" field.
func NodeListIDIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldNodeListID))
}

// NodeListIDNotNil applies the NotNil predicate on the "node_list_id" field.
func NodeListIDNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldNodeListID))
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeList applies the HasEdge predicate on the "node_list" edge.
func HasNodeList() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, NodeListTable, NodeListColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeListWith applies the HasEdge predicate on the "node_list" edge with a given conditions (other predicates).
func HasNodeListWith(preds ...predicate.NodeList) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newNodeListStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(sql.NotPredicates(p))
}
