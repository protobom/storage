// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/identifiersentry"
	"github.com/protobom/storage/internal/backends/ent/node"
)

// IdentifiersEntryCreate is the builder for creating a IdentifiersEntry entity.
type IdentifiersEntryCreate struct {
	config
	mutation *IdentifiersEntryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDocumentID sets the "document_id" field.
func (iec *IdentifiersEntryCreate) SetDocumentID(u uuid.UUID) *IdentifiersEntryCreate {
	iec.mutation.SetDocumentID(u)
	return iec
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (iec *IdentifiersEntryCreate) SetNillableDocumentID(u *uuid.UUID) *IdentifiersEntryCreate {
	if u != nil {
		iec.SetDocumentID(*u)
	}
	return iec
}

// SetType sets the "type" field.
func (iec *IdentifiersEntryCreate) SetType(i identifiersentry.Type) *IdentifiersEntryCreate {
	iec.mutation.SetType(i)
	return iec
}

// SetValue sets the "value" field.
func (iec *IdentifiersEntryCreate) SetValue(s string) *IdentifiersEntryCreate {
	iec.mutation.SetValue(s)
	return iec
}

// SetID sets the "id" field.
func (iec *IdentifiersEntryCreate) SetID(u uuid.UUID) *IdentifiersEntryCreate {
	iec.mutation.SetID(u)
	return iec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iec *IdentifiersEntryCreate) SetNillableID(u *uuid.UUID) *IdentifiersEntryCreate {
	if u != nil {
		iec.SetID(*u)
	}
	return iec
}

// SetDocument sets the "document" edge to the Document entity.
func (iec *IdentifiersEntryCreate) SetDocument(d *Document) *IdentifiersEntryCreate {
	return iec.SetDocumentID(d.ID)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (iec *IdentifiersEntryCreate) AddNodeIDs(ids ...uuid.UUID) *IdentifiersEntryCreate {
	iec.mutation.AddNodeIDs(ids...)
	return iec
}

// AddNodes adds the "nodes" edges to the Node entity.
func (iec *IdentifiersEntryCreate) AddNodes(n ...*Node) *IdentifiersEntryCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iec.AddNodeIDs(ids...)
}

// Mutation returns the IdentifiersEntryMutation object of the builder.
func (iec *IdentifiersEntryCreate) Mutation() *IdentifiersEntryMutation {
	return iec.mutation
}

// Save creates the IdentifiersEntry in the database.
func (iec *IdentifiersEntryCreate) Save(ctx context.Context) (*IdentifiersEntry, error) {
	iec.defaults()
	return withHooks(ctx, iec.sqlSave, iec.mutation, iec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iec *IdentifiersEntryCreate) SaveX(ctx context.Context) *IdentifiersEntry {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *IdentifiersEntryCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *IdentifiersEntryCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *IdentifiersEntryCreate) defaults() {
	if _, ok := iec.mutation.DocumentID(); !ok {
		v := identifiersentry.DefaultDocumentID()
		iec.mutation.SetDocumentID(v)
	}
	if _, ok := iec.mutation.ID(); !ok {
		v := identifiersentry.DefaultID()
		iec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iec *IdentifiersEntryCreate) check() error {
	if _, ok := iec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "IdentifiersEntry.type"`)}
	}
	if v, ok := iec.mutation.GetType(); ok {
		if err := identifiersentry.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IdentifiersEntry.type": %w`, err)}
		}
	}
	if _, ok := iec.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "IdentifiersEntry.value"`)}
	}
	if len(iec.mutation.NodesIDs()) == 0 {
		return &ValidationError{Name: "nodes", err: errors.New(`ent: missing required edge "IdentifiersEntry.nodes"`)}
	}
	return nil
}

func (iec *IdentifiersEntryCreate) sqlSave(ctx context.Context) (*IdentifiersEntry, error) {
	if err := iec.check(); err != nil {
		return nil, err
	}
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iec.mutation.id = &_node.ID
	iec.mutation.done = true
	return _node, nil
}

func (iec *IdentifiersEntryCreate) createSpec() (*IdentifiersEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &IdentifiersEntry{config: iec.config}
		_spec = sqlgraph.NewCreateSpec(identifiersentry.Table, sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iec.conflict
	if id, ok := iec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iec.mutation.GetType(); ok {
		_spec.SetField(identifiersentry.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := iec.mutation.Value(); ok {
		_spec.SetField(identifiersentry.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := iec.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifiersentry.DocumentTable,
			Columns: []string{identifiersentry.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DocumentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   identifiersentry.NodesTable,
			Columns: identifiersentry.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IdentifiersEntry.Create().
//		SetDocumentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentifiersEntryUpsert) {
//			SetDocumentID(v+v).
//		}).
//		Exec(ctx)
func (iec *IdentifiersEntryCreate) OnConflict(opts ...sql.ConflictOption) *IdentifiersEntryUpsertOne {
	iec.conflict = opts
	return &IdentifiersEntryUpsertOne{
		create: iec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iec *IdentifiersEntryCreate) OnConflictColumns(columns ...string) *IdentifiersEntryUpsertOne {
	iec.conflict = append(iec.conflict, sql.ConflictColumns(columns...))
	return &IdentifiersEntryUpsertOne{
		create: iec,
	}
}

type (
	// IdentifiersEntryUpsertOne is the builder for "upsert"-ing
	//  one IdentifiersEntry node.
	IdentifiersEntryUpsertOne struct {
		create *IdentifiersEntryCreate
	}

	// IdentifiersEntryUpsert is the "OnConflict" setter.
	IdentifiersEntryUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *IdentifiersEntryUpsert) SetType(v identifiersentry.Type) *IdentifiersEntryUpsert {
	u.Set(identifiersentry.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IdentifiersEntryUpsert) UpdateType() *IdentifiersEntryUpsert {
	u.SetExcluded(identifiersentry.FieldType)
	return u
}

// SetValue sets the "value" field.
func (u *IdentifiersEntryUpsert) SetValue(v string) *IdentifiersEntryUpsert {
	u.Set(identifiersentry.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *IdentifiersEntryUpsert) UpdateValue() *IdentifiersEntryUpsert {
	u.SetExcluded(identifiersentry.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(identifiersentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IdentifiersEntryUpsertOne) UpdateNewValues() *IdentifiersEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(identifiersentry.FieldID)
		}
		if _, exists := u.create.mutation.DocumentID(); exists {
			s.SetIgnore(identifiersentry.FieldDocumentID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IdentifiersEntryUpsertOne) Ignore() *IdentifiersEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentifiersEntryUpsertOne) DoNothing() *IdentifiersEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentifiersEntryCreate.OnConflict
// documentation for more info.
func (u *IdentifiersEntryUpsertOne) Update(set func(*IdentifiersEntryUpsert)) *IdentifiersEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentifiersEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *IdentifiersEntryUpsertOne) SetType(v identifiersentry.Type) *IdentifiersEntryUpsertOne {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IdentifiersEntryUpsertOne) UpdateType() *IdentifiersEntryUpsertOne {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *IdentifiersEntryUpsertOne) SetValue(v string) *IdentifiersEntryUpsertOne {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *IdentifiersEntryUpsertOne) UpdateValue() *IdentifiersEntryUpsertOne {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *IdentifiersEntryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentifiersEntryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentifiersEntryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IdentifiersEntryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IdentifiersEntryUpsertOne.ID is not supported by MySQL driver. Use IdentifiersEntryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IdentifiersEntryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IdentifiersEntryCreateBulk is the builder for creating many IdentifiersEntry entities in bulk.
type IdentifiersEntryCreateBulk struct {
	config
	err      error
	builders []*IdentifiersEntryCreate
	conflict []sql.ConflictOption
}

// Save creates the IdentifiersEntry entities in the database.
func (iecb *IdentifiersEntryCreateBulk) Save(ctx context.Context) ([]*IdentifiersEntry, error) {
	if iecb.err != nil {
		return nil, iecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*IdentifiersEntry, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentifiersEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *IdentifiersEntryCreateBulk) SaveX(ctx context.Context) []*IdentifiersEntry {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *IdentifiersEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *IdentifiersEntryCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IdentifiersEntry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentifiersEntryUpsert) {
//			SetDocumentID(v+v).
//		}).
//		Exec(ctx)
func (iecb *IdentifiersEntryCreateBulk) OnConflict(opts ...sql.ConflictOption) *IdentifiersEntryUpsertBulk {
	iecb.conflict = opts
	return &IdentifiersEntryUpsertBulk{
		create: iecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecb *IdentifiersEntryCreateBulk) OnConflictColumns(columns ...string) *IdentifiersEntryUpsertBulk {
	iecb.conflict = append(iecb.conflict, sql.ConflictColumns(columns...))
	return &IdentifiersEntryUpsertBulk{
		create: iecb,
	}
}

// IdentifiersEntryUpsertBulk is the builder for "upsert"-ing
// a bulk of IdentifiersEntry nodes.
type IdentifiersEntryUpsertBulk struct {
	create *IdentifiersEntryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(identifiersentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IdentifiersEntryUpsertBulk) UpdateNewValues() *IdentifiersEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(identifiersentry.FieldID)
			}
			if _, exists := b.mutation.DocumentID(); exists {
				s.SetIgnore(identifiersentry.FieldDocumentID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IdentifiersEntry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IdentifiersEntryUpsertBulk) Ignore() *IdentifiersEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentifiersEntryUpsertBulk) DoNothing() *IdentifiersEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentifiersEntryCreateBulk.OnConflict
// documentation for more info.
func (u *IdentifiersEntryUpsertBulk) Update(set func(*IdentifiersEntryUpsert)) *IdentifiersEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentifiersEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *IdentifiersEntryUpsertBulk) SetType(v identifiersentry.Type) *IdentifiersEntryUpsertBulk {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IdentifiersEntryUpsertBulk) UpdateType() *IdentifiersEntryUpsertBulk {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *IdentifiersEntryUpsertBulk) SetValue(v string) *IdentifiersEntryUpsertBulk {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *IdentifiersEntryUpsertBulk) UpdateValue() *IdentifiersEntryUpsertBulk {
	return u.Update(func(s *IdentifiersEntryUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *IdentifiersEntryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IdentifiersEntryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentifiersEntryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentifiersEntryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
