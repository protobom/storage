// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package hashesentry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLTE(FieldID, id))
}

// ExternalReferenceID applies equality check predicate on the "external_reference_id" field. It's identical to ExternalReferenceIDEQ.
func ExternalReferenceID(v int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldExternalReferenceID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldNodeID, v))
}

// HashData applies equality check predicate on the "hash_data" field. It's identical to HashDataEQ.
func HashData(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldHashData, v))
}

// ExternalReferenceIDEQ applies the EQ predicate on the "external_reference_id" field.
func ExternalReferenceIDEQ(v int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldExternalReferenceID, v))
}

// ExternalReferenceIDNEQ applies the NEQ predicate on the "external_reference_id" field.
func ExternalReferenceIDNEQ(v int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNEQ(FieldExternalReferenceID, v))
}

// ExternalReferenceIDIn applies the In predicate on the "external_reference_id" field.
func ExternalReferenceIDIn(vs ...int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIn(FieldExternalReferenceID, vs...))
}

// ExternalReferenceIDNotIn applies the NotIn predicate on the "external_reference_id" field.
func ExternalReferenceIDNotIn(vs ...int) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotIn(FieldExternalReferenceID, vs...))
}

// ExternalReferenceIDIsNil applies the IsNil predicate on the "external_reference_id" field.
func ExternalReferenceIDIsNil() predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIsNull(FieldExternalReferenceID))
}

// ExternalReferenceIDNotNil applies the NotNil predicate on the "external_reference_id" field.
func ExternalReferenceIDNotNil() predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotNull(FieldExternalReferenceID))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDIsNil applies the IsNil predicate on the "node_id" field.
func NodeIDIsNil() predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIsNull(FieldNodeID))
}

// NodeIDNotNil applies the NotNil predicate on the "node_id" field.
func NodeIDNotNil() predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotNull(FieldNodeID))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldContainsFold(FieldNodeID, v))
}

// HashAlgorithmTypeEQ applies the EQ predicate on the "hash_algorithm_type" field.
func HashAlgorithmTypeEQ(v HashAlgorithmType) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldHashAlgorithmType, v))
}

// HashAlgorithmTypeNEQ applies the NEQ predicate on the "hash_algorithm_type" field.
func HashAlgorithmTypeNEQ(v HashAlgorithmType) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNEQ(FieldHashAlgorithmType, v))
}

// HashAlgorithmTypeIn applies the In predicate on the "hash_algorithm_type" field.
func HashAlgorithmTypeIn(vs ...HashAlgorithmType) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIn(FieldHashAlgorithmType, vs...))
}

// HashAlgorithmTypeNotIn applies the NotIn predicate on the "hash_algorithm_type" field.
func HashAlgorithmTypeNotIn(vs ...HashAlgorithmType) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotIn(FieldHashAlgorithmType, vs...))
}

// HashDataEQ applies the EQ predicate on the "hash_data" field.
func HashDataEQ(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEQ(FieldHashData, v))
}

// HashDataNEQ applies the NEQ predicate on the "hash_data" field.
func HashDataNEQ(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNEQ(FieldHashData, v))
}

// HashDataIn applies the In predicate on the "hash_data" field.
func HashDataIn(vs ...string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldIn(FieldHashData, vs...))
}

// HashDataNotIn applies the NotIn predicate on the "hash_data" field.
func HashDataNotIn(vs ...string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldNotIn(FieldHashData, vs...))
}

// HashDataGT applies the GT predicate on the "hash_data" field.
func HashDataGT(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGT(FieldHashData, v))
}

// HashDataGTE applies the GTE predicate on the "hash_data" field.
func HashDataGTE(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldGTE(FieldHashData, v))
}

// HashDataLT applies the LT predicate on the "hash_data" field.
func HashDataLT(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLT(FieldHashData, v))
}

// HashDataLTE applies the LTE predicate on the "hash_data" field.
func HashDataLTE(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldLTE(FieldHashData, v))
}

// HashDataContains applies the Contains predicate on the "hash_data" field.
func HashDataContains(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldContains(FieldHashData, v))
}

// HashDataHasPrefix applies the HasPrefix predicate on the "hash_data" field.
func HashDataHasPrefix(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldHasPrefix(FieldHashData, v))
}

// HashDataHasSuffix applies the HasSuffix predicate on the "hash_data" field.
func HashDataHasSuffix(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldHasSuffix(FieldHashData, v))
}

// HashDataEqualFold applies the EqualFold predicate on the "hash_data" field.
func HashDataEqualFold(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldEqualFold(FieldHashData, v))
}

// HashDataContainsFold applies the ContainsFold predicate on the "hash_data" field.
func HashDataContainsFold(v string) predicate.HashesEntry {
	return predicate.HashesEntry(sql.FieldContainsFold(FieldHashData, v))
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DocumentTable, DocumentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.Document) predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := newDocumentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExternalReference applies the HasEdge predicate on the "external_reference" edge.
func HasExternalReference() predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExternalReferenceTable, ExternalReferenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExternalReferenceWith applies the HasEdge predicate on the "external_reference" edge with a given conditions (other predicates).
func HasExternalReferenceWith(preds ...predicate.ExternalReference) predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := newExternalReferenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.HashesEntry {
	return predicate.HashesEntry(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HashesEntry) predicate.HashesEntry {
	return predicate.HashesEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HashesEntry) predicate.HashesEntry {
	return predicate.HashesEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HashesEntry) predicate.HashesEntry {
	return predicate.HashesEntry(sql.NotPredicates(p))
}
