// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/documenttype"
	"github.com/protobom/storage/internal/backends/ent/metadata"
)

// DocumentType is the model entity for the DocumentType schema.
type DocumentType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DocumentID holds the value of the "document_id" field.
	DocumentID uuid.UUID `json:"document_id,omitempty"`
	// ProtoMessage holds the value of the "proto_message" field.
	ProtoMessage *sbom.DocumentType `json:"proto_message,omitempty"`
	// MetadataID holds the value of the "metadata_id" field.
	MetadataID uuid.UUID `json:"metadata_id,omitempty"`
	// Type holds the value of the "type" field.
	Type *documenttype.Type `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentTypeQuery when eager-loading is set.
	Edges        DocumentTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DocumentTypeEdges holds the relations/edges for other nodes in the graph.
type DocumentTypeEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentTypeEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentTypeEdges) MetadataOrErr() (*Metadata, error) {
	if e.Metadata != nil {
		return e.Metadata, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: metadata.Label}
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case documenttype.FieldProtoMessage:
			values[i] = &sql.NullScanner{S: new(sbom.DocumentType)}
		case documenttype.FieldType, documenttype.FieldName, documenttype.FieldDescription:
			values[i] = new(sql.NullString)
		case documenttype.FieldID, documenttype.FieldDocumentID, documenttype.FieldMetadataID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentType fields.
func (dt *DocumentType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case documenttype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dt.ID = *value
			}
		case documenttype.FieldDocumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_id", values[i])
			} else if value != nil {
				dt.DocumentID = *value
			}
		case documenttype.FieldProtoMessage:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field proto_message", values[i])
			} else if value.Valid {
				dt.ProtoMessage = value.S.(*sbom.DocumentType)
			}
		case documenttype.FieldMetadataID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_id", values[i])
			} else if value != nil {
				dt.MetadataID = *value
			}
		case documenttype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dt.Type = new(documenttype.Type)
				*dt.Type = documenttype.Type(value.String)
			}
		case documenttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dt.Name = new(string)
				*dt.Name = value.String
			}
		case documenttype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dt.Description = new(string)
				*dt.Description = value.String
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DocumentType.
// This includes values selected through modifiers, order, etc.
func (dt *DocumentType) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the DocumentType entity.
func (dt *DocumentType) QueryDocument() *DocumentQuery {
	return NewDocumentTypeClient(dt.config).QueryDocument(dt)
}

// QueryMetadata queries the "metadata" edge of the DocumentType entity.
func (dt *DocumentType) QueryMetadata() *MetadataQuery {
	return NewDocumentTypeClient(dt.config).QueryMetadata(dt)
}

// Update returns a builder for updating this DocumentType.
// Note that you need to call DocumentType.Unwrap() before calling this method if this DocumentType
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DocumentType) Update() *DocumentTypeUpdateOne {
	return NewDocumentTypeClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DocumentType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DocumentType) Unwrap() *DocumentType {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DocumentType is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DocumentType) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("document_id=")
	builder.WriteString(fmt.Sprintf("%v", dt.DocumentID))
	builder.WriteString(", ")
	if v := dt.ProtoMessage; v != nil {
		builder.WriteString("proto_message=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata_id=")
	builder.WriteString(fmt.Sprintf("%v", dt.MetadataID))
	builder.WriteString(", ")
	if v := dt.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dt.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dt.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// DocumentTypes is a parsable slice of DocumentType.
type DocumentTypes []*DocumentType
