// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/protobom/storage/internal/backends/ent"
	"github.com/protobom/storage/internal/backends/ent/annotation"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/documenttype"
	"github.com/protobom/storage/internal/backends/ent/edgetype"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/hashesentry"
	"github.com/protobom/storage/internal/backends/ent/identifiersentry"
	"github.com/protobom/storage/internal/backends/ent/metadata"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/nodelist"
	"github.com/protobom/storage/internal/backends/ent/person"
	"github.com/protobom/storage/internal/backends/ent/predicate"
	"github.com/protobom/storage/internal/backends/ent/property"
	"github.com/protobom/storage/internal/backends/ent/purpose"
	"github.com/protobom/storage/internal/backends/ent/sourcedata"
	"github.com/protobom/storage/internal/backends/ent/tool"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AnnotationFunc type is an adapter to allow the use of ordinary function as a Querier.
type AnnotationFunc func(context.Context, *ent.AnnotationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AnnotationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AnnotationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AnnotationQuery", q)
}

// The TraverseAnnotation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAnnotation func(context.Context, *ent.AnnotationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAnnotation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAnnotation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AnnotationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AnnotationQuery", q)
}

// The DocumentFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentFunc func(context.Context, *ent.DocumentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DocumentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The TraverseDocument type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocument func(context.Context, *ent.DocumentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocument) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocument) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The DocumentTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentTypeFunc func(context.Context, *ent.DocumentTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DocumentTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DocumentTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DocumentTypeQuery", q)
}

// The TraverseDocumentType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocumentType func(context.Context, *ent.DocumentTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocumentType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocumentType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DocumentTypeQuery", q)
}

// The EdgeTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type EdgeTypeFunc func(context.Context, *ent.EdgeTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EdgeTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EdgeTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EdgeTypeQuery", q)
}

// The TraverseEdgeType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEdgeType func(context.Context, *ent.EdgeTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEdgeType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEdgeType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EdgeTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EdgeTypeQuery", q)
}

// The ExternalReferenceFunc type is an adapter to allow the use of ordinary function as a Querier.
type ExternalReferenceFunc func(context.Context, *ent.ExternalReferenceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ExternalReferenceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ExternalReferenceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ExternalReferenceQuery", q)
}

// The TraverseExternalReference type is an adapter to allow the use of ordinary function as Traverser.
type TraverseExternalReference func(context.Context, *ent.ExternalReferenceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseExternalReference) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseExternalReference) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExternalReferenceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ExternalReferenceQuery", q)
}

// The HashesEntryFunc type is an adapter to allow the use of ordinary function as a Querier.
type HashesEntryFunc func(context.Context, *ent.HashesEntryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HashesEntryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HashesEntryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HashesEntryQuery", q)
}

// The TraverseHashesEntry type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHashesEntry func(context.Context, *ent.HashesEntryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHashesEntry) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHashesEntry) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HashesEntryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HashesEntryQuery", q)
}

// The IdentifiersEntryFunc type is an adapter to allow the use of ordinary function as a Querier.
type IdentifiersEntryFunc func(context.Context, *ent.IdentifiersEntryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IdentifiersEntryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IdentifiersEntryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IdentifiersEntryQuery", q)
}

// The TraverseIdentifiersEntry type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIdentifiersEntry func(context.Context, *ent.IdentifiersEntryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIdentifiersEntry) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIdentifiersEntry) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IdentifiersEntryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IdentifiersEntryQuery", q)
}

// The MetadataFunc type is an adapter to allow the use of ordinary function as a Querier.
type MetadataFunc func(context.Context, *ent.MetadataQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MetadataFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MetadataQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MetadataQuery", q)
}

// The TraverseMetadata type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMetadata func(context.Context, *ent.MetadataQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMetadata) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMetadata) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MetadataQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MetadataQuery", q)
}

// The NodeFunc type is an adapter to allow the use of ordinary function as a Querier.
type NodeFunc func(context.Context, *ent.NodeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NodeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NodeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NodeQuery", q)
}

// The TraverseNode type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNode func(context.Context, *ent.NodeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNode) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNode) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NodeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NodeQuery", q)
}

// The NodeListFunc type is an adapter to allow the use of ordinary function as a Querier.
type NodeListFunc func(context.Context, *ent.NodeListQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NodeListFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NodeListQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NodeListQuery", q)
}

// The TraverseNodeList type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNodeList func(context.Context, *ent.NodeListQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNodeList) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNodeList) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NodeListQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NodeListQuery", q)
}

// The PersonFunc type is an adapter to allow the use of ordinary function as a Querier.
type PersonFunc func(context.Context, *ent.PersonQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PersonFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PersonQuery", q)
}

// The TraversePerson type is an adapter to allow the use of ordinary function as Traverser.
type TraversePerson func(context.Context, *ent.PersonQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePerson) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePerson) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PersonQuery", q)
}

// The PropertyFunc type is an adapter to allow the use of ordinary function as a Querier.
type PropertyFunc func(context.Context, *ent.PropertyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PropertyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PropertyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PropertyQuery", q)
}

// The TraverseProperty type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProperty func(context.Context, *ent.PropertyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProperty) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProperty) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PropertyQuery", q)
}

// The PurposeFunc type is an adapter to allow the use of ordinary function as a Querier.
type PurposeFunc func(context.Context, *ent.PurposeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PurposeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PurposeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PurposeQuery", q)
}

// The TraversePurpose type is an adapter to allow the use of ordinary function as Traverser.
type TraversePurpose func(context.Context, *ent.PurposeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePurpose) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePurpose) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PurposeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PurposeQuery", q)
}

// The SourceDataFunc type is an adapter to allow the use of ordinary function as a Querier.
type SourceDataFunc func(context.Context, *ent.SourceDataQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SourceDataFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SourceDataQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SourceDataQuery", q)
}

// The TraverseSourceData type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSourceData func(context.Context, *ent.SourceDataQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSourceData) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSourceData) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SourceDataQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SourceDataQuery", q)
}

// The ToolFunc type is an adapter to allow the use of ordinary function as a Querier.
type ToolFunc func(context.Context, *ent.ToolQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ToolFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ToolQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ToolQuery", q)
}

// The TraverseTool type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTool func(context.Context, *ent.ToolQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTool) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTool) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ToolQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ToolQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AnnotationQuery:
		return &query[*ent.AnnotationQuery, predicate.Annotation, annotation.OrderOption]{typ: ent.TypeAnnotation, tq: q}, nil
	case *ent.DocumentQuery:
		return &query[*ent.DocumentQuery, predicate.Document, document.OrderOption]{typ: ent.TypeDocument, tq: q}, nil
	case *ent.DocumentTypeQuery:
		return &query[*ent.DocumentTypeQuery, predicate.DocumentType, documenttype.OrderOption]{typ: ent.TypeDocumentType, tq: q}, nil
	case *ent.EdgeTypeQuery:
		return &query[*ent.EdgeTypeQuery, predicate.EdgeType, edgetype.OrderOption]{typ: ent.TypeEdgeType, tq: q}, nil
	case *ent.ExternalReferenceQuery:
		return &query[*ent.ExternalReferenceQuery, predicate.ExternalReference, externalreference.OrderOption]{typ: ent.TypeExternalReference, tq: q}, nil
	case *ent.HashesEntryQuery:
		return &query[*ent.HashesEntryQuery, predicate.HashesEntry, hashesentry.OrderOption]{typ: ent.TypeHashesEntry, tq: q}, nil
	case *ent.IdentifiersEntryQuery:
		return &query[*ent.IdentifiersEntryQuery, predicate.IdentifiersEntry, identifiersentry.OrderOption]{typ: ent.TypeIdentifiersEntry, tq: q}, nil
	case *ent.MetadataQuery:
		return &query[*ent.MetadataQuery, predicate.Metadata, metadata.OrderOption]{typ: ent.TypeMetadata, tq: q}, nil
	case *ent.NodeQuery:
		return &query[*ent.NodeQuery, predicate.Node, node.OrderOption]{typ: ent.TypeNode, tq: q}, nil
	case *ent.NodeListQuery:
		return &query[*ent.NodeListQuery, predicate.NodeList, nodelist.OrderOption]{typ: ent.TypeNodeList, tq: q}, nil
	case *ent.PersonQuery:
		return &query[*ent.PersonQuery, predicate.Person, person.OrderOption]{typ: ent.TypePerson, tq: q}, nil
	case *ent.PropertyQuery:
		return &query[*ent.PropertyQuery, predicate.Property, property.OrderOption]{typ: ent.TypeProperty, tq: q}, nil
	case *ent.PurposeQuery:
		return &query[*ent.PurposeQuery, predicate.Purpose, purpose.OrderOption]{typ: ent.TypePurpose, tq: q}, nil
	case *ent.SourceDataQuery:
		return &query[*ent.SourceDataQuery, predicate.SourceData, sourcedata.OrderOption]{typ: ent.TypeSourceData, tq: q}, nil
	case *ent.ToolQuery:
		return &query[*ent.ToolQuery, predicate.Tool, tool.OrderOption]{typ: ent.TypeTool, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
