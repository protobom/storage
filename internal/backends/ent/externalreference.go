// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/node"
)

// ExternalReference is the model entity for the ExternalReference schema.
type ExternalReference struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DocumentID holds the value of the "document_id" field.
	DocumentID uuid.UUID `json:"document_id,omitempty"`
	// ProtoMessage holds the value of the "proto_message" field.
	ProtoMessage *sbom.ExternalReference `json:"proto_message,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID uuid.UUID `json:"node_id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Authority holds the value of the "authority" field.
	Authority string `json:"authority,omitempty"`
	// Type holds the value of the "type" field.
	Type externalreference.Type `json:"type,omitempty"`
	// Hashes holds the value of the "hashes" field.
	Hashes map[int32]string `json:"hashes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExternalReferenceQuery when eager-loading is set.
	Edges        ExternalReferenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExternalReferenceEdges holds the relations/edges for other nodes in the graph.
type ExternalReferenceEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExternalReferenceEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExternalReferenceEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExternalReference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case externalreference.FieldProtoMessage:
			values[i] = &sql.NullScanner{S: new(sbom.ExternalReference)}
		case externalreference.FieldHashes:
			values[i] = new([]byte)
		case externalreference.FieldURL, externalreference.FieldComment, externalreference.FieldAuthority, externalreference.FieldType:
			values[i] = new(sql.NullString)
		case externalreference.FieldID, externalreference.FieldDocumentID, externalreference.FieldNodeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExternalReference fields.
func (er *ExternalReference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case externalreference.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				er.ID = *value
			}
		case externalreference.FieldDocumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_id", values[i])
			} else if value != nil {
				er.DocumentID = *value
			}
		case externalreference.FieldProtoMessage:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field proto_message", values[i])
			} else if value.Valid {
				er.ProtoMessage = value.S.(*sbom.ExternalReference)
			}
		case externalreference.FieldNodeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value != nil {
				er.NodeID = *value
			}
		case externalreference.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				er.URL = value.String
			}
		case externalreference.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				er.Comment = value.String
			}
		case externalreference.FieldAuthority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authority", values[i])
			} else if value.Valid {
				er.Authority = value.String
			}
		case externalreference.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				er.Type = externalreference.Type(value.String)
			}
		case externalreference.FieldHashes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hashes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &er.Hashes); err != nil {
					return fmt.Errorf("unmarshal field hashes: %w", err)
				}
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExternalReference.
// This includes values selected through modifiers, order, etc.
func (er *ExternalReference) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the ExternalReference entity.
func (er *ExternalReference) QueryDocument() *DocumentQuery {
	return NewExternalReferenceClient(er.config).QueryDocument(er)
}

// QueryNode queries the "node" edge of the ExternalReference entity.
func (er *ExternalReference) QueryNode() *NodeQuery {
	return NewExternalReferenceClient(er.config).QueryNode(er)
}

// Update returns a builder for updating this ExternalReference.
// Note that you need to call ExternalReference.Unwrap() before calling this method if this ExternalReference
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *ExternalReference) Update() *ExternalReferenceUpdateOne {
	return NewExternalReferenceClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the ExternalReference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *ExternalReference) Unwrap() *ExternalReference {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExternalReference is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *ExternalReference) String() string {
	var builder strings.Builder
	builder.WriteString("ExternalReference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("document_id=")
	builder.WriteString(fmt.Sprintf("%v", er.DocumentID))
	builder.WriteString(", ")
	if v := er.ProtoMessage; v != nil {
		builder.WriteString("proto_message=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(fmt.Sprintf("%v", er.NodeID))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(er.URL)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(er.Comment)
	builder.WriteString(", ")
	builder.WriteString("authority=")
	builder.WriteString(er.Authority)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", er.Type))
	builder.WriteString(", ")
	builder.WriteString("hashes=")
	builder.WriteString(fmt.Sprintf("%v", er.Hashes))
	builder.WriteByte(')')
	return builder.String()
}

// ExternalReferences is a parsable slice of ExternalReference.
type ExternalReferences []*ExternalReference
