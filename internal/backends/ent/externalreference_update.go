// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// ExternalReferenceUpdate is the builder for updating ExternalReference entities.
type ExternalReferenceUpdate struct {
	config
	hooks    []Hook
	mutation *ExternalReferenceMutation
}

// Where appends a list predicates to the ExternalReferenceUpdate builder.
func (eru *ExternalReferenceUpdate) Where(ps ...predicate.ExternalReference) *ExternalReferenceUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetNodeID sets the "node_id" field.
func (eru *ExternalReferenceUpdate) SetNodeID(s string) *ExternalReferenceUpdate {
	eru.mutation.SetNodeID(s)
	return eru
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (eru *ExternalReferenceUpdate) SetNillableNodeID(s *string) *ExternalReferenceUpdate {
	if s != nil {
		eru.SetNodeID(*s)
	}
	return eru
}

// ClearNodeID clears the value of the "node_id" field.
func (eru *ExternalReferenceUpdate) ClearNodeID() *ExternalReferenceUpdate {
	eru.mutation.ClearNodeID()
	return eru
}

// SetURL sets the "url" field.
func (eru *ExternalReferenceUpdate) SetURL(s string) *ExternalReferenceUpdate {
	eru.mutation.SetURL(s)
	return eru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eru *ExternalReferenceUpdate) SetNillableURL(s *string) *ExternalReferenceUpdate {
	if s != nil {
		eru.SetURL(*s)
	}
	return eru
}

// SetComment sets the "comment" field.
func (eru *ExternalReferenceUpdate) SetComment(s string) *ExternalReferenceUpdate {
	eru.mutation.SetComment(s)
	return eru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (eru *ExternalReferenceUpdate) SetNillableComment(s *string) *ExternalReferenceUpdate {
	if s != nil {
		eru.SetComment(*s)
	}
	return eru
}

// SetAuthority sets the "authority" field.
func (eru *ExternalReferenceUpdate) SetAuthority(s string) *ExternalReferenceUpdate {
	eru.mutation.SetAuthority(s)
	return eru
}

// SetNillableAuthority sets the "authority" field if the given value is not nil.
func (eru *ExternalReferenceUpdate) SetNillableAuthority(s *string) *ExternalReferenceUpdate {
	if s != nil {
		eru.SetAuthority(*s)
	}
	return eru
}

// ClearAuthority clears the value of the "authority" field.
func (eru *ExternalReferenceUpdate) ClearAuthority() *ExternalReferenceUpdate {
	eru.mutation.ClearAuthority()
	return eru
}

// SetType sets the "type" field.
func (eru *ExternalReferenceUpdate) SetType(e externalreference.Type) *ExternalReferenceUpdate {
	eru.mutation.SetType(e)
	return eru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eru *ExternalReferenceUpdate) SetNillableType(e *externalreference.Type) *ExternalReferenceUpdate {
	if e != nil {
		eru.SetType(*e)
	}
	return eru
}

// SetHashes sets the "hashes" field.
func (eru *ExternalReferenceUpdate) SetHashes(m map[int32]string) *ExternalReferenceUpdate {
	eru.mutation.SetHashes(m)
	return eru
}

// ClearHashes clears the value of the "hashes" field.
func (eru *ExternalReferenceUpdate) ClearHashes() *ExternalReferenceUpdate {
	eru.mutation.ClearHashes()
	return eru
}

// SetNode sets the "node" edge to the Node entity.
func (eru *ExternalReferenceUpdate) SetNode(n *Node) *ExternalReferenceUpdate {
	return eru.SetNodeID(n.ID)
}

// Mutation returns the ExternalReferenceMutation object of the builder.
func (eru *ExternalReferenceUpdate) Mutation() *ExternalReferenceMutation {
	return eru.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (eru *ExternalReferenceUpdate) ClearNode() *ExternalReferenceUpdate {
	eru.mutation.ClearNode()
	return eru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *ExternalReferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eru.sqlSave, eru.mutation, eru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eru *ExternalReferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *ExternalReferenceUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *ExternalReferenceUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eru *ExternalReferenceUpdate) check() error {
	if v, ok := eru.mutation.GetType(); ok {
		if err := externalreference.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ExternalReference.type": %w`, err)}
		}
	}
	return nil
}

func (eru *ExternalReferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(externalreference.Table, externalreference.Columns, sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID))
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.URL(); ok {
		_spec.SetField(externalreference.FieldURL, field.TypeString, value)
	}
	if value, ok := eru.mutation.Comment(); ok {
		_spec.SetField(externalreference.FieldComment, field.TypeString, value)
	}
	if value, ok := eru.mutation.Authority(); ok {
		_spec.SetField(externalreference.FieldAuthority, field.TypeString, value)
	}
	if eru.mutation.AuthorityCleared() {
		_spec.ClearField(externalreference.FieldAuthority, field.TypeString)
	}
	if value, ok := eru.mutation.GetType(); ok {
		_spec.SetField(externalreference.FieldType, field.TypeEnum, value)
	}
	if value, ok := eru.mutation.Hashes(); ok {
		_spec.SetField(externalreference.FieldHashes, field.TypeJSON, value)
	}
	if eru.mutation.HashesCleared() {
		_spec.ClearField(externalreference.FieldHashes, field.TypeJSON)
	}
	if eru.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   externalreference.NodeTable,
			Columns: []string{externalreference.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   externalreference.NodeTable,
			Columns: []string{externalreference.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eru.mutation.done = true
	return n, nil
}

// ExternalReferenceUpdateOne is the builder for updating a single ExternalReference entity.
type ExternalReferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExternalReferenceMutation
}

// SetNodeID sets the "node_id" field.
func (eruo *ExternalReferenceUpdateOne) SetNodeID(s string) *ExternalReferenceUpdateOne {
	eruo.mutation.SetNodeID(s)
	return eruo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (eruo *ExternalReferenceUpdateOne) SetNillableNodeID(s *string) *ExternalReferenceUpdateOne {
	if s != nil {
		eruo.SetNodeID(*s)
	}
	return eruo
}

// ClearNodeID clears the value of the "node_id" field.
func (eruo *ExternalReferenceUpdateOne) ClearNodeID() *ExternalReferenceUpdateOne {
	eruo.mutation.ClearNodeID()
	return eruo
}

// SetURL sets the "url" field.
func (eruo *ExternalReferenceUpdateOne) SetURL(s string) *ExternalReferenceUpdateOne {
	eruo.mutation.SetURL(s)
	return eruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eruo *ExternalReferenceUpdateOne) SetNillableURL(s *string) *ExternalReferenceUpdateOne {
	if s != nil {
		eruo.SetURL(*s)
	}
	return eruo
}

// SetComment sets the "comment" field.
func (eruo *ExternalReferenceUpdateOne) SetComment(s string) *ExternalReferenceUpdateOne {
	eruo.mutation.SetComment(s)
	return eruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (eruo *ExternalReferenceUpdateOne) SetNillableComment(s *string) *ExternalReferenceUpdateOne {
	if s != nil {
		eruo.SetComment(*s)
	}
	return eruo
}

// SetAuthority sets the "authority" field.
func (eruo *ExternalReferenceUpdateOne) SetAuthority(s string) *ExternalReferenceUpdateOne {
	eruo.mutation.SetAuthority(s)
	return eruo
}

// SetNillableAuthority sets the "authority" field if the given value is not nil.
func (eruo *ExternalReferenceUpdateOne) SetNillableAuthority(s *string) *ExternalReferenceUpdateOne {
	if s != nil {
		eruo.SetAuthority(*s)
	}
	return eruo
}

// ClearAuthority clears the value of the "authority" field.
func (eruo *ExternalReferenceUpdateOne) ClearAuthority() *ExternalReferenceUpdateOne {
	eruo.mutation.ClearAuthority()
	return eruo
}

// SetType sets the "type" field.
func (eruo *ExternalReferenceUpdateOne) SetType(e externalreference.Type) *ExternalReferenceUpdateOne {
	eruo.mutation.SetType(e)
	return eruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eruo *ExternalReferenceUpdateOne) SetNillableType(e *externalreference.Type) *ExternalReferenceUpdateOne {
	if e != nil {
		eruo.SetType(*e)
	}
	return eruo
}

// SetHashes sets the "hashes" field.
func (eruo *ExternalReferenceUpdateOne) SetHashes(m map[int32]string) *ExternalReferenceUpdateOne {
	eruo.mutation.SetHashes(m)
	return eruo
}

// ClearHashes clears the value of the "hashes" field.
func (eruo *ExternalReferenceUpdateOne) ClearHashes() *ExternalReferenceUpdateOne {
	eruo.mutation.ClearHashes()
	return eruo
}

// SetNode sets the "node" edge to the Node entity.
func (eruo *ExternalReferenceUpdateOne) SetNode(n *Node) *ExternalReferenceUpdateOne {
	return eruo.SetNodeID(n.ID)
}

// Mutation returns the ExternalReferenceMutation object of the builder.
func (eruo *ExternalReferenceUpdateOne) Mutation() *ExternalReferenceMutation {
	return eruo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (eruo *ExternalReferenceUpdateOne) ClearNode() *ExternalReferenceUpdateOne {
	eruo.mutation.ClearNode()
	return eruo
}

// Where appends a list predicates to the ExternalReferenceUpdate builder.
func (eruo *ExternalReferenceUpdateOne) Where(ps ...predicate.ExternalReference) *ExternalReferenceUpdateOne {
	eruo.mutation.Where(ps...)
	return eruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *ExternalReferenceUpdateOne) Select(field string, fields ...string) *ExternalReferenceUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated ExternalReference entity.
func (eruo *ExternalReferenceUpdateOne) Save(ctx context.Context) (*ExternalReference, error) {
	return withHooks(ctx, eruo.sqlSave, eruo.mutation, eruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *ExternalReferenceUpdateOne) SaveX(ctx context.Context) *ExternalReference {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *ExternalReferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *ExternalReferenceUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eruo *ExternalReferenceUpdateOne) check() error {
	if v, ok := eruo.mutation.GetType(); ok {
		if err := externalreference.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ExternalReference.type": %w`, err)}
		}
	}
	return nil
}

func (eruo *ExternalReferenceUpdateOne) sqlSave(ctx context.Context) (_node *ExternalReference, err error) {
	if err := eruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(externalreference.Table, externalreference.Columns, sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID))
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExternalReference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, externalreference.FieldID)
		for _, f := range fields {
			if !externalreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != externalreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.URL(); ok {
		_spec.SetField(externalreference.FieldURL, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Comment(); ok {
		_spec.SetField(externalreference.FieldComment, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Authority(); ok {
		_spec.SetField(externalreference.FieldAuthority, field.TypeString, value)
	}
	if eruo.mutation.AuthorityCleared() {
		_spec.ClearField(externalreference.FieldAuthority, field.TypeString)
	}
	if value, ok := eruo.mutation.GetType(); ok {
		_spec.SetField(externalreference.FieldType, field.TypeEnum, value)
	}
	if value, ok := eruo.mutation.Hashes(); ok {
		_spec.SetField(externalreference.FieldHashes, field.TypeJSON, value)
	}
	if eruo.mutation.HashesCleared() {
		_spec.ClearField(externalreference.FieldHashes, field.TypeJSON)
	}
	if eruo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   externalreference.NodeTable,
			Columns: []string{externalreference.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   externalreference.NodeTable,
			Columns: []string{externalreference.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExternalReference{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eruo.mutation.done = true
	return _node, nil
}
