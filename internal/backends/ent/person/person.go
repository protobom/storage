// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package person

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProtoMessage holds the string denoting the proto_message field in the database.
	FieldProtoMessage = "proto_message"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsOrg holds the string denoting the is_org field in the database.
	FieldIsOrg = "is_org"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// EdgeContactOwner holds the string denoting the contact_owner edge name in mutations.
	EdgeContactOwner = "contact_owner"
	// EdgeContacts holds the string denoting the contacts edge name in mutations.
	EdgeContacts = "contacts"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeOriginatorNodes holds the string denoting the originator_nodes edge name in mutations.
	EdgeOriginatorNodes = "originator_nodes"
	// EdgeSupplierNodes holds the string denoting the supplier_nodes edge name in mutations.
	EdgeSupplierNodes = "supplier_nodes"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// ContactOwnerTable is the table that holds the contact_owner relation/edge. The primary key declared below.
	ContactOwnerTable = "person_contacts"
	// ContactsTable is the table that holds the contacts relation/edge. The primary key declared below.
	ContactsTable = "person_contacts"
	// DocumentsTable is the table that holds the documents relation/edge. The primary key declared below.
	DocumentsTable = "document_persons"
	// DocumentsInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentsInverseTable = "documents"
	// MetadataTable is the table that holds the metadata relation/edge. The primary key declared below.
	MetadataTable = "metadata_authors"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// OriginatorNodesTable is the table that holds the originator_nodes relation/edge. The primary key declared below.
	OriginatorNodesTable = "node_originators"
	// OriginatorNodesInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	OriginatorNodesInverseTable = "nodes"
	// SupplierNodesTable is the table that holds the supplier_nodes relation/edge. The primary key declared below.
	SupplierNodesTable = "node_suppliers"
	// SupplierNodesInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	SupplierNodesInverseTable = "nodes"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldProtoMessage,
	FieldName,
	FieldIsOrg,
	FieldEmail,
	FieldURL,
	FieldPhone,
}

var (
	// ContactOwnerPrimaryKey and ContactOwnerColumn2 are the table columns denoting the
	// primary key for the contact_owner relation (M2M).
	ContactOwnerPrimaryKey = []string{"person_id", "contact_owner_id"}
	// ContactsPrimaryKey and ContactsColumn2 are the table columns denoting the
	// primary key for the contacts relation (M2M).
	ContactsPrimaryKey = []string{"person_id", "contact_owner_id"}
	// DocumentsPrimaryKey and DocumentsColumn2 are the table columns denoting the
	// primary key for the documents relation (M2M).
	DocumentsPrimaryKey = []string{"document_id", "person_id"}
	// MetadataPrimaryKey and MetadataColumn2 are the table columns denoting the
	// primary key for the metadata relation (M2M).
	MetadataPrimaryKey = []string{"metadata_id", "person_id"}
	// OriginatorNodesPrimaryKey and OriginatorNodesColumn2 are the table columns denoting the
	// primary key for the originator_nodes relation (M2M).
	OriginatorNodesPrimaryKey = []string{"node_id", "person_id"}
	// SupplierNodesPrimaryKey and SupplierNodesColumn2 are the table columns denoting the
	// primary key for the supplier_nodes relation (M2M).
	SupplierNodesPrimaryKey = []string{"node_id", "person_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/protobom/storage/internal/backends/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsOrg orders the results by the is_org field.
func ByIsOrg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOrg, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByContactOwnerCount orders the results by contact_owner count.
func ByContactOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactOwnerStep(), opts...)
	}
}

// ByContactOwner orders the results by contact_owner terms.
func ByContactOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactsCount orders the results by contacts count.
func ByContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactsStep(), opts...)
	}
}

// ByContacts orders the results by contacts terms.
func ByContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataCount orders the results by metadata count.
func ByMetadataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataStep(), opts...)
	}
}

// ByMetadata orders the results by metadata terms.
func ByMetadata(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOriginatorNodesCount orders the results by originator_nodes count.
func ByOriginatorNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOriginatorNodesStep(), opts...)
	}
}

// ByOriginatorNodes orders the results by originator_nodes terms.
func ByOriginatorNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginatorNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySupplierNodesCount orders the results by supplier_nodes count.
func BySupplierNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSupplierNodesStep(), opts...)
	}
}

// BySupplierNodes orders the results by supplier_nodes terms.
func BySupplierNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupplierNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContactOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ContactOwnerTable, ContactOwnerPrimaryKey...),
	)
}
func newContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ContactsTable, ContactsPrimaryKey...),
	)
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DocumentsTable, DocumentsPrimaryKey...),
	)
}
func newMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MetadataTable, MetadataPrimaryKey...),
	)
}
func newOriginatorNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginatorNodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OriginatorNodesTable, OriginatorNodesPrimaryKey...),
	)
}
func newSupplierNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupplierNodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SupplierNodesTable, SupplierNodesPrimaryKey...),
	)
}
