// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/predicate"
	"github.com/protobom/storage/internal/backends/ent/purpose"
)

// PurposeUpdate is the builder for updating Purpose entities.
type PurposeUpdate struct {
	config
	hooks    []Hook
	mutation *PurposeMutation
}

// Where appends a list predicates to the PurposeUpdate builder.
func (pu *PurposeUpdate) Where(ps ...predicate.Purpose) *PurposeUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (pu *PurposeUpdate) SetPrimaryPurpose(pp purpose.PrimaryPurpose) *PurposeUpdate {
	pu.mutation.SetPrimaryPurpose(pp)
	return pu
}

// SetNillablePrimaryPurpose sets the "primary_purpose" field if the given value is not nil.
func (pu *PurposeUpdate) SetNillablePrimaryPurpose(pp *purpose.PrimaryPurpose) *PurposeUpdate {
	if pp != nil {
		pu.SetPrimaryPurpose(*pp)
	}
	return pu
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (pu *PurposeUpdate) AddNodeIDs(ids ...uuid.UUID) *PurposeUpdate {
	pu.mutation.AddNodeIDs(ids...)
	return pu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (pu *PurposeUpdate) AddNodes(n ...*Node) *PurposeUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNodeIDs(ids...)
}

// Mutation returns the PurposeMutation object of the builder.
func (pu *PurposeUpdate) Mutation() *PurposeMutation {
	return pu.mutation
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (pu *PurposeUpdate) ClearNodes() *PurposeUpdate {
	pu.mutation.ClearNodes()
	return pu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (pu *PurposeUpdate) RemoveNodeIDs(ids ...uuid.UUID) *PurposeUpdate {
	pu.mutation.RemoveNodeIDs(ids...)
	return pu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (pu *PurposeUpdate) RemoveNodes(n ...*Node) *PurposeUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PurposeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PurposeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PurposeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PurposeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PurposeUpdate) check() error {
	if v, ok := pu.mutation.PrimaryPurpose(); ok {
		if err := purpose.PrimaryPurposeValidator(v); err != nil {
			return &ValidationError{Name: "primary_purpose", err: fmt.Errorf(`ent: validator failed for field "Purpose.primary_purpose": %w`, err)}
		}
	}
	return nil
}

func (pu *PurposeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(purpose.Table, purpose.Columns, sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PrimaryPurpose(); ok {
		_spec.SetField(purpose.FieldPrimaryPurpose, field.TypeEnum, value)
	}
	if pu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !pu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purpose.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PurposeUpdateOne is the builder for updating a single Purpose entity.
type PurposeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PurposeMutation
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (puo *PurposeUpdateOne) SetPrimaryPurpose(pp purpose.PrimaryPurpose) *PurposeUpdateOne {
	puo.mutation.SetPrimaryPurpose(pp)
	return puo
}

// SetNillablePrimaryPurpose sets the "primary_purpose" field if the given value is not nil.
func (puo *PurposeUpdateOne) SetNillablePrimaryPurpose(pp *purpose.PrimaryPurpose) *PurposeUpdateOne {
	if pp != nil {
		puo.SetPrimaryPurpose(*pp)
	}
	return puo
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (puo *PurposeUpdateOne) AddNodeIDs(ids ...uuid.UUID) *PurposeUpdateOne {
	puo.mutation.AddNodeIDs(ids...)
	return puo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (puo *PurposeUpdateOne) AddNodes(n ...*Node) *PurposeUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNodeIDs(ids...)
}

// Mutation returns the PurposeMutation object of the builder.
func (puo *PurposeUpdateOne) Mutation() *PurposeMutation {
	return puo.mutation
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (puo *PurposeUpdateOne) ClearNodes() *PurposeUpdateOne {
	puo.mutation.ClearNodes()
	return puo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (puo *PurposeUpdateOne) RemoveNodeIDs(ids ...uuid.UUID) *PurposeUpdateOne {
	puo.mutation.RemoveNodeIDs(ids...)
	return puo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (puo *PurposeUpdateOne) RemoveNodes(n ...*Node) *PurposeUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNodeIDs(ids...)
}

// Where appends a list predicates to the PurposeUpdate builder.
func (puo *PurposeUpdateOne) Where(ps ...predicate.Purpose) *PurposeUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PurposeUpdateOne) Select(field string, fields ...string) *PurposeUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Purpose entity.
func (puo *PurposeUpdateOne) Save(ctx context.Context) (*Purpose, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PurposeUpdateOne) SaveX(ctx context.Context) *Purpose {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PurposeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PurposeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PurposeUpdateOne) check() error {
	if v, ok := puo.mutation.PrimaryPurpose(); ok {
		if err := purpose.PrimaryPurposeValidator(v); err != nil {
			return &ValidationError{Name: "primary_purpose", err: fmt.Errorf(`ent: validator failed for field "Purpose.primary_purpose": %w`, err)}
		}
	}
	return nil
}

func (puo *PurposeUpdateOne) sqlSave(ctx context.Context) (_node *Purpose, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(purpose.Table, purpose.Columns, sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Purpose.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purpose.FieldID)
		for _, f := range fields {
			if !purpose.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purpose.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PrimaryPurpose(); ok {
		_spec.SetField(purpose.FieldPrimaryPurpose, field.TypeEnum, value)
	}
	if puo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !puo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   purpose.NodesTable,
			Columns: purpose.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Purpose{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purpose.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
