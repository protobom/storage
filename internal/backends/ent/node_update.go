// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/edgetype"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/nodelist"
	"github.com/protobom/storage/internal/backends/ent/person"
	"github.com/protobom/storage/internal/backends/ent/predicate"
	"github.com/protobom/storage/internal/backends/ent/property"
	"github.com/protobom/storage/internal/backends/ent/purpose"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetNodeListID sets the "node_list_id" field.
func (nu *NodeUpdate) SetNodeListID(u uuid.UUID) *NodeUpdate {
	nu.mutation.SetNodeListID(u)
	return nu
}

// SetNillableNodeListID sets the "node_list_id" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableNodeListID(u *uuid.UUID) *NodeUpdate {
	if u != nil {
		nu.SetNodeListID(*u)
	}
	return nu
}

// ClearNodeListID clears the value of the "node_list_id" field.
func (nu *NodeUpdate) ClearNodeListID() *NodeUpdate {
	nu.mutation.ClearNodeListID()
	return nu
}

// SetType sets the "type" field.
func (nu *NodeUpdate) SetType(n node.Type) *NodeUpdate {
	nu.mutation.SetType(n)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableType(n *node.Type) *NodeUpdate {
	if n != nil {
		nu.SetType(*n)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetVersion sets the "version" field.
func (nu *NodeUpdate) SetVersion(s string) *NodeUpdate {
	nu.mutation.SetVersion(s)
	return nu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableVersion(s *string) *NodeUpdate {
	if s != nil {
		nu.SetVersion(*s)
	}
	return nu
}

// SetFileName sets the "file_name" field.
func (nu *NodeUpdate) SetFileName(s string) *NodeUpdate {
	nu.mutation.SetFileName(s)
	return nu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFileName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFileName(*s)
	}
	return nu
}

// SetURLHome sets the "url_home" field.
func (nu *NodeUpdate) SetURLHome(s string) *NodeUpdate {
	nu.mutation.SetURLHome(s)
	return nu
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLHome(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLHome(*s)
	}
	return nu
}

// SetURLDownload sets the "url_download" field.
func (nu *NodeUpdate) SetURLDownload(s string) *NodeUpdate {
	nu.mutation.SetURLDownload(s)
	return nu
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLDownload(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLDownload(*s)
	}
	return nu
}

// SetLicenses sets the "licenses" field.
func (nu *NodeUpdate) SetLicenses(s []string) *NodeUpdate {
	nu.mutation.SetLicenses(s)
	return nu
}

// AppendLicenses appends s to the "licenses" field.
func (nu *NodeUpdate) AppendLicenses(s []string) *NodeUpdate {
	nu.mutation.AppendLicenses(s)
	return nu
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nu *NodeUpdate) SetLicenseConcluded(s string) *NodeUpdate {
	nu.mutation.SetLicenseConcluded(s)
	return nu
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseConcluded(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseConcluded(*s)
	}
	return nu
}

// SetLicenseComments sets the "license_comments" field.
func (nu *NodeUpdate) SetLicenseComments(s string) *NodeUpdate {
	nu.mutation.SetLicenseComments(s)
	return nu
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseComments(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseComments(*s)
	}
	return nu
}

// SetCopyright sets the "copyright" field.
func (nu *NodeUpdate) SetCopyright(s string) *NodeUpdate {
	nu.mutation.SetCopyright(s)
	return nu
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCopyright(s *string) *NodeUpdate {
	if s != nil {
		nu.SetCopyright(*s)
	}
	return nu
}

// SetSourceInfo sets the "source_info" field.
func (nu *NodeUpdate) SetSourceInfo(s string) *NodeUpdate {
	nu.mutation.SetSourceInfo(s)
	return nu
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSourceInfo(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSourceInfo(*s)
	}
	return nu
}

// SetComment sets the "comment" field.
func (nu *NodeUpdate) SetComment(s string) *NodeUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableComment(s *string) *NodeUpdate {
	if s != nil {
		nu.SetComment(*s)
	}
	return nu
}

// SetSummary sets the "summary" field.
func (nu *NodeUpdate) SetSummary(s string) *NodeUpdate {
	nu.mutation.SetSummary(s)
	return nu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSummary(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSummary(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NodeUpdate) SetDescription(s string) *NodeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDescription(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// SetReleaseDate sets the "release_date" field.
func (nu *NodeUpdate) SetReleaseDate(t time.Time) *NodeUpdate {
	nu.mutation.SetReleaseDate(t)
	return nu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableReleaseDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetReleaseDate(*t)
	}
	return nu
}

// SetBuildDate sets the "build_date" field.
func (nu *NodeUpdate) SetBuildDate(t time.Time) *NodeUpdate {
	nu.mutation.SetBuildDate(t)
	return nu
}

// SetNillableBuildDate sets the "build_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableBuildDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetBuildDate(*t)
	}
	return nu
}

// SetValidUntilDate sets the "valid_until_date" field.
func (nu *NodeUpdate) SetValidUntilDate(t time.Time) *NodeUpdate {
	nu.mutation.SetValidUntilDate(t)
	return nu
}

// SetNillableValidUntilDate sets the "valid_until_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableValidUntilDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetValidUntilDate(*t)
	}
	return nu
}

// SetAttribution sets the "attribution" field.
func (nu *NodeUpdate) SetAttribution(s []string) *NodeUpdate {
	nu.mutation.SetAttribution(s)
	return nu
}

// AppendAttribution appends s to the "attribution" field.
func (nu *NodeUpdate) AppendAttribution(s []string) *NodeUpdate {
	nu.mutation.AppendAttribution(s)
	return nu
}

// SetFileTypes sets the "file_types" field.
func (nu *NodeUpdate) SetFileTypes(s []string) *NodeUpdate {
	nu.mutation.SetFileTypes(s)
	return nu
}

// AppendFileTypes appends s to the "file_types" field.
func (nu *NodeUpdate) AppendFileTypes(s []string) *NodeUpdate {
	nu.mutation.AppendFileTypes(s)
	return nu
}

// SetHashes sets the "hashes" field.
func (nu *NodeUpdate) SetHashes(m map[int32]string) *NodeUpdate {
	nu.mutation.SetHashes(m)
	return nu
}

// ClearHashes clears the value of the "hashes" field.
func (nu *NodeUpdate) ClearHashes() *NodeUpdate {
	nu.mutation.ClearHashes()
	return nu
}

// SetIdentifiers sets the "identifiers" field.
func (nu *NodeUpdate) SetIdentifiers(m map[int32]string) *NodeUpdate {
	nu.mutation.SetIdentifiers(m)
	return nu
}

// ClearIdentifiers clears the value of the "identifiers" field.
func (nu *NodeUpdate) ClearIdentifiers() *NodeUpdate {
	nu.mutation.ClearIdentifiers()
	return nu
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddSupplierIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddSupplierIDs(ids...)
	return nu
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nu *NodeUpdate) AddSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddOriginatorIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddOriginatorIDs(ids...)
	return nu
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nu *NodeUpdate) AddOriginators(p ...*Person) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nu *NodeUpdate) AddExternalReferenceIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddExternalReferenceIDs(ids...)
	return nu
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) AddExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddExternalReferenceIDs(ids...)
}

// AddPrimaryPurposeIDs adds the "primary_purpose" edge to the Purpose entity by IDs.
func (nu *NodeUpdate) AddPrimaryPurposeIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddPrimaryPurposeIDs(ids...)
	return nu
}

// AddPrimaryPurpose adds the "primary_purpose" edges to the Purpose entity.
func (nu *NodeUpdate) AddPrimaryPurpose(p ...*Purpose) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddPrimaryPurposeIDs(ids...)
}

// AddToNodeIDs adds the "to_nodes" edge to the Node entity by IDs.
func (nu *NodeUpdate) AddToNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.AddToNodeIDs(ids...)
	return nu
}

// AddToNodes adds the "to_nodes" edges to the Node entity.
func (nu *NodeUpdate) AddToNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddToNodeIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nu *NodeUpdate) AddNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.AddNodeIDs(ids...)
	return nu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nu *NodeUpdate) AddNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNodeIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (nu *NodeUpdate) AddPropertyIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddPropertyIDs(ids...)
	return nu
}

// AddProperties adds the "properties" edges to the Property entity.
func (nu *NodeUpdate) AddProperties(p ...*Property) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddPropertyIDs(ids...)
}

// AddNodeListIDs adds the "node_lists" edge to the NodeList entity by IDs.
func (nu *NodeUpdate) AddNodeListIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddNodeListIDs(ids...)
	return nu
}

// AddNodeLists adds the "node_lists" edges to the NodeList entity.
func (nu *NodeUpdate) AddNodeLists(n ...*NodeList) *NodeUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNodeListIDs(ids...)
}

// AddEdgeTypeIDs adds the "edge_types" edge to the EdgeType entity by IDs.
func (nu *NodeUpdate) AddEdgeTypeIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddEdgeTypeIDs(ids...)
	return nu
}

// AddEdgeTypes adds the "edge_types" edges to the EdgeType entity.
func (nu *NodeUpdate) AddEdgeTypes(e ...*EdgeType) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddEdgeTypeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearSuppliers clears all "suppliers" edges to the Person entity.
func (nu *NodeUpdate) ClearSuppliers() *NodeUpdate {
	nu.mutation.ClearSuppliers()
	return nu
}

// RemoveSupplierIDs removes the "suppliers" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveSupplierIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemoveSupplierIDs(ids...)
	return nu
}

// RemoveSuppliers removes "suppliers" edges to Person entities.
func (nu *NodeUpdate) RemoveSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveSupplierIDs(ids...)
}

// ClearOriginators clears all "originators" edges to the Person entity.
func (nu *NodeUpdate) ClearOriginators() *NodeUpdate {
	nu.mutation.ClearOriginators()
	return nu
}

// RemoveOriginatorIDs removes the "originators" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveOriginatorIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemoveOriginatorIDs(ids...)
	return nu
}

// RemoveOriginators removes "originators" edges to Person entities.
func (nu *NodeUpdate) RemoveOriginators(p ...*Person) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveOriginatorIDs(ids...)
}

// ClearExternalReferences clears all "external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) ClearExternalReferences() *NodeUpdate {
	nu.mutation.ClearExternalReferences()
	return nu
}

// RemoveExternalReferenceIDs removes the "external_references" edge to ExternalReference entities by IDs.
func (nu *NodeUpdate) RemoveExternalReferenceIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemoveExternalReferenceIDs(ids...)
	return nu
}

// RemoveExternalReferences removes "external_references" edges to ExternalReference entities.
func (nu *NodeUpdate) RemoveExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveExternalReferenceIDs(ids...)
}

// ClearPrimaryPurpose clears all "primary_purpose" edges to the Purpose entity.
func (nu *NodeUpdate) ClearPrimaryPurpose() *NodeUpdate {
	nu.mutation.ClearPrimaryPurpose()
	return nu
}

// RemovePrimaryPurposeIDs removes the "primary_purpose" edge to Purpose entities by IDs.
func (nu *NodeUpdate) RemovePrimaryPurposeIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemovePrimaryPurposeIDs(ids...)
	return nu
}

// RemovePrimaryPurpose removes "primary_purpose" edges to Purpose entities.
func (nu *NodeUpdate) RemovePrimaryPurpose(p ...*Purpose) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemovePrimaryPurposeIDs(ids...)
}

// ClearToNodes clears all "to_nodes" edges to the Node entity.
func (nu *NodeUpdate) ClearToNodes() *NodeUpdate {
	nu.mutation.ClearToNodes()
	return nu
}

// RemoveToNodeIDs removes the "to_nodes" edge to Node entities by IDs.
func (nu *NodeUpdate) RemoveToNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.RemoveToNodeIDs(ids...)
	return nu
}

// RemoveToNodes removes "to_nodes" edges to Node entities.
func (nu *NodeUpdate) RemoveToNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveToNodeIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nu *NodeUpdate) ClearNodes() *NodeUpdate {
	nu.mutation.ClearNodes()
	return nu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nu *NodeUpdate) RemoveNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.RemoveNodeIDs(ids...)
	return nu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nu *NodeUpdate) RemoveNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNodeIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (nu *NodeUpdate) ClearProperties() *NodeUpdate {
	nu.mutation.ClearProperties()
	return nu
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (nu *NodeUpdate) RemovePropertyIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemovePropertyIDs(ids...)
	return nu
}

// RemoveProperties removes "properties" edges to Property entities.
func (nu *NodeUpdate) RemoveProperties(p ...*Property) *NodeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemovePropertyIDs(ids...)
}

// ClearNodeLists clears all "node_lists" edges to the NodeList entity.
func (nu *NodeUpdate) ClearNodeLists() *NodeUpdate {
	nu.mutation.ClearNodeLists()
	return nu
}

// RemoveNodeListIDs removes the "node_lists" edge to NodeList entities by IDs.
func (nu *NodeUpdate) RemoveNodeListIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemoveNodeListIDs(ids...)
	return nu
}

// RemoveNodeLists removes "node_lists" edges to NodeList entities.
func (nu *NodeUpdate) RemoveNodeLists(n ...*NodeList) *NodeUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNodeListIDs(ids...)
}

// ClearEdgeTypes clears all "edge_types" edges to the EdgeType entity.
func (nu *NodeUpdate) ClearEdgeTypes() *NodeUpdate {
	nu.mutation.ClearEdgeTypes()
	return nu
}

// RemoveEdgeTypeIDs removes the "edge_types" edge to EdgeType entities by IDs.
func (nu *NodeUpdate) RemoveEdgeTypeIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveEdgeTypeIDs(ids...)
	return nu
}

// RemoveEdgeTypes removes "edge_types" edges to EdgeType entities.
func (nu *NodeUpdate) RemoveEdgeTypes(e ...*EdgeType) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveEdgeTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodeUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	return nil
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.NodeListID(); ok {
		_spec.SetField(node.FieldNodeListID, field.TypeUUID, value)
	}
	if nu.mutation.NodeListIDCleared() {
		_spec.ClearField(node.FieldNodeListID, field.TypeUUID)
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nu.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nu.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedLicenses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldLicenses, value)
		})
	}
	if value, ok := nu.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nu.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nu.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nu.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nu.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nu.mutation.ReleaseDate(); ok {
		_spec.SetField(node.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.BuildDate(); ok {
		_spec.SetField(node.FieldBuildDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.ValidUntilDate(); ok {
		_spec.SetField(node.FieldValidUntilDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedAttribution(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAttribution, value)
		})
	}
	if value, ok := nu.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedFileTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldFileTypes, value)
		})
	}
	if value, ok := nu.mutation.Hashes(); ok {
		_spec.SetField(node.FieldHashes, field.TypeJSON, value)
	}
	if nu.mutation.HashesCleared() {
		_spec.ClearField(node.FieldHashes, field.TypeJSON)
	}
	if value, ok := nu.mutation.Identifiers(); ok {
		_spec.SetField(node.FieldIdentifiers, field.TypeJSON, value)
	}
	if nu.mutation.IdentifiersCleared() {
		_spec.ClearField(node.FieldIdentifiers, field.TypeJSON)
	}
	if nu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !nu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedOriginatorsIDs(); len(nodes) > 0 && !nu.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedExternalReferencesIDs(); len(nodes) > 0 && !nu.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.PrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedPrimaryPurposeIDs(); len(nodes) > 0 && !nu.mutation.PrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PrimaryPurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ToNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &EdgeTypeCreate{config: nu.config, mutation: newEdgeTypeMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedToNodesIDs(); len(nodes) > 0 && !nu.mutation.ToNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EdgeTypeCreate{config: nu.config, mutation: newEdgeTypeMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ToNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EdgeTypeCreate{config: nu.config, mutation: newEdgeTypeMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !nu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeListsIDs(); len(nodes) > 0 && !nu.mutation.NodeListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedEdgeTypesIDs(); len(nodes) > 0 && !nu.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EdgeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetNodeListID sets the "node_list_id" field.
func (nuo *NodeUpdateOne) SetNodeListID(u uuid.UUID) *NodeUpdateOne {
	nuo.mutation.SetNodeListID(u)
	return nuo
}

// SetNillableNodeListID sets the "node_list_id" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableNodeListID(u *uuid.UUID) *NodeUpdateOne {
	if u != nil {
		nuo.SetNodeListID(*u)
	}
	return nuo
}

// ClearNodeListID clears the value of the "node_list_id" field.
func (nuo *NodeUpdateOne) ClearNodeListID() *NodeUpdateOne {
	nuo.mutation.ClearNodeListID()
	return nuo
}

// SetType sets the "type" field.
func (nuo *NodeUpdateOne) SetType(n node.Type) *NodeUpdateOne {
	nuo.mutation.SetType(n)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableType(n *node.Type) *NodeUpdateOne {
	if n != nil {
		nuo.SetType(*n)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetVersion sets the "version" field.
func (nuo *NodeUpdateOne) SetVersion(s string) *NodeUpdateOne {
	nuo.mutation.SetVersion(s)
	return nuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableVersion(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetVersion(*s)
	}
	return nuo
}

// SetFileName sets the "file_name" field.
func (nuo *NodeUpdateOne) SetFileName(s string) *NodeUpdateOne {
	nuo.mutation.SetFileName(s)
	return nuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFileName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFileName(*s)
	}
	return nuo
}

// SetURLHome sets the "url_home" field.
func (nuo *NodeUpdateOne) SetURLHome(s string) *NodeUpdateOne {
	nuo.mutation.SetURLHome(s)
	return nuo
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLHome(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLHome(*s)
	}
	return nuo
}

// SetURLDownload sets the "url_download" field.
func (nuo *NodeUpdateOne) SetURLDownload(s string) *NodeUpdateOne {
	nuo.mutation.SetURLDownload(s)
	return nuo
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLDownload(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLDownload(*s)
	}
	return nuo
}

// SetLicenses sets the "licenses" field.
func (nuo *NodeUpdateOne) SetLicenses(s []string) *NodeUpdateOne {
	nuo.mutation.SetLicenses(s)
	return nuo
}

// AppendLicenses appends s to the "licenses" field.
func (nuo *NodeUpdateOne) AppendLicenses(s []string) *NodeUpdateOne {
	nuo.mutation.AppendLicenses(s)
	return nuo
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nuo *NodeUpdateOne) SetLicenseConcluded(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseConcluded(s)
	return nuo
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseConcluded(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseConcluded(*s)
	}
	return nuo
}

// SetLicenseComments sets the "license_comments" field.
func (nuo *NodeUpdateOne) SetLicenseComments(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseComments(s)
	return nuo
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseComments(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseComments(*s)
	}
	return nuo
}

// SetCopyright sets the "copyright" field.
func (nuo *NodeUpdateOne) SetCopyright(s string) *NodeUpdateOne {
	nuo.mutation.SetCopyright(s)
	return nuo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCopyright(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetCopyright(*s)
	}
	return nuo
}

// SetSourceInfo sets the "source_info" field.
func (nuo *NodeUpdateOne) SetSourceInfo(s string) *NodeUpdateOne {
	nuo.mutation.SetSourceInfo(s)
	return nuo
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSourceInfo(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSourceInfo(*s)
	}
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NodeUpdateOne) SetComment(s string) *NodeUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableComment(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetComment(*s)
	}
	return nuo
}

// SetSummary sets the "summary" field.
func (nuo *NodeUpdateOne) SetSummary(s string) *NodeUpdateOne {
	nuo.mutation.SetSummary(s)
	return nuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSummary(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSummary(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NodeUpdateOne) SetDescription(s string) *NodeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDescription(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// SetReleaseDate sets the "release_date" field.
func (nuo *NodeUpdateOne) SetReleaseDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetReleaseDate(t)
	return nuo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableReleaseDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetReleaseDate(*t)
	}
	return nuo
}

// SetBuildDate sets the "build_date" field.
func (nuo *NodeUpdateOne) SetBuildDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetBuildDate(t)
	return nuo
}

// SetNillableBuildDate sets the "build_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableBuildDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetBuildDate(*t)
	}
	return nuo
}

// SetValidUntilDate sets the "valid_until_date" field.
func (nuo *NodeUpdateOne) SetValidUntilDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetValidUntilDate(t)
	return nuo
}

// SetNillableValidUntilDate sets the "valid_until_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableValidUntilDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetValidUntilDate(*t)
	}
	return nuo
}

// SetAttribution sets the "attribution" field.
func (nuo *NodeUpdateOne) SetAttribution(s []string) *NodeUpdateOne {
	nuo.mutation.SetAttribution(s)
	return nuo
}

// AppendAttribution appends s to the "attribution" field.
func (nuo *NodeUpdateOne) AppendAttribution(s []string) *NodeUpdateOne {
	nuo.mutation.AppendAttribution(s)
	return nuo
}

// SetFileTypes sets the "file_types" field.
func (nuo *NodeUpdateOne) SetFileTypes(s []string) *NodeUpdateOne {
	nuo.mutation.SetFileTypes(s)
	return nuo
}

// AppendFileTypes appends s to the "file_types" field.
func (nuo *NodeUpdateOne) AppendFileTypes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendFileTypes(s)
	return nuo
}

// SetHashes sets the "hashes" field.
func (nuo *NodeUpdateOne) SetHashes(m map[int32]string) *NodeUpdateOne {
	nuo.mutation.SetHashes(m)
	return nuo
}

// ClearHashes clears the value of the "hashes" field.
func (nuo *NodeUpdateOne) ClearHashes() *NodeUpdateOne {
	nuo.mutation.ClearHashes()
	return nuo
}

// SetIdentifiers sets the "identifiers" field.
func (nuo *NodeUpdateOne) SetIdentifiers(m map[int32]string) *NodeUpdateOne {
	nuo.mutation.SetIdentifiers(m)
	return nuo
}

// ClearIdentifiers clears the value of the "identifiers" field.
func (nuo *NodeUpdateOne) ClearIdentifiers() *NodeUpdateOne {
	nuo.mutation.ClearIdentifiers()
	return nuo
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddSupplierIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddSupplierIDs(ids...)
	return nuo
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) AddSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddOriginatorIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddOriginatorIDs(ids...)
	return nuo
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nuo *NodeUpdateOne) AddOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nuo *NodeUpdateOne) AddExternalReferenceIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddExternalReferenceIDs(ids...)
	return nuo
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) AddExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddExternalReferenceIDs(ids...)
}

// AddPrimaryPurposeIDs adds the "primary_purpose" edge to the Purpose entity by IDs.
func (nuo *NodeUpdateOne) AddPrimaryPurposeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddPrimaryPurposeIDs(ids...)
	return nuo
}

// AddPrimaryPurpose adds the "primary_purpose" edges to the Purpose entity.
func (nuo *NodeUpdateOne) AddPrimaryPurpose(p ...*Purpose) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddPrimaryPurposeIDs(ids...)
}

// AddToNodeIDs adds the "to_nodes" edge to the Node entity by IDs.
func (nuo *NodeUpdateOne) AddToNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.AddToNodeIDs(ids...)
	return nuo
}

// AddToNodes adds the "to_nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) AddToNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddToNodeIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nuo *NodeUpdateOne) AddNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.AddNodeIDs(ids...)
	return nuo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) AddNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNodeIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (nuo *NodeUpdateOne) AddPropertyIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddPropertyIDs(ids...)
	return nuo
}

// AddProperties adds the "properties" edges to the Property entity.
func (nuo *NodeUpdateOne) AddProperties(p ...*Property) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddPropertyIDs(ids...)
}

// AddNodeListIDs adds the "node_lists" edge to the NodeList entity by IDs.
func (nuo *NodeUpdateOne) AddNodeListIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddNodeListIDs(ids...)
	return nuo
}

// AddNodeLists adds the "node_lists" edges to the NodeList entity.
func (nuo *NodeUpdateOne) AddNodeLists(n ...*NodeList) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNodeListIDs(ids...)
}

// AddEdgeTypeIDs adds the "edge_types" edge to the EdgeType entity by IDs.
func (nuo *NodeUpdateOne) AddEdgeTypeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddEdgeTypeIDs(ids...)
	return nuo
}

// AddEdgeTypes adds the "edge_types" edges to the EdgeType entity.
func (nuo *NodeUpdateOne) AddEdgeTypes(e ...*EdgeType) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddEdgeTypeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearSuppliers clears all "suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearSuppliers() *NodeUpdateOne {
	nuo.mutation.ClearSuppliers()
	return nuo
}

// RemoveSupplierIDs removes the "suppliers" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveSupplierIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemoveSupplierIDs(ids...)
	return nuo
}

// RemoveSuppliers removes "suppliers" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveSupplierIDs(ids...)
}

// ClearOriginators clears all "originators" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearOriginators() *NodeUpdateOne {
	nuo.mutation.ClearOriginators()
	return nuo
}

// RemoveOriginatorIDs removes the "originators" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveOriginatorIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemoveOriginatorIDs(ids...)
	return nuo
}

// RemoveOriginators removes "originators" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveOriginatorIDs(ids...)
}

// ClearExternalReferences clears all "external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) ClearExternalReferences() *NodeUpdateOne {
	nuo.mutation.ClearExternalReferences()
	return nuo
}

// RemoveExternalReferenceIDs removes the "external_references" edge to ExternalReference entities by IDs.
func (nuo *NodeUpdateOne) RemoveExternalReferenceIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemoveExternalReferenceIDs(ids...)
	return nuo
}

// RemoveExternalReferences removes "external_references" edges to ExternalReference entities.
func (nuo *NodeUpdateOne) RemoveExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveExternalReferenceIDs(ids...)
}

// ClearPrimaryPurpose clears all "primary_purpose" edges to the Purpose entity.
func (nuo *NodeUpdateOne) ClearPrimaryPurpose() *NodeUpdateOne {
	nuo.mutation.ClearPrimaryPurpose()
	return nuo
}

// RemovePrimaryPurposeIDs removes the "primary_purpose" edge to Purpose entities by IDs.
func (nuo *NodeUpdateOne) RemovePrimaryPurposeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemovePrimaryPurposeIDs(ids...)
	return nuo
}

// RemovePrimaryPurpose removes "primary_purpose" edges to Purpose entities.
func (nuo *NodeUpdateOne) RemovePrimaryPurpose(p ...*Purpose) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemovePrimaryPurposeIDs(ids...)
}

// ClearToNodes clears all "to_nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) ClearToNodes() *NodeUpdateOne {
	nuo.mutation.ClearToNodes()
	return nuo
}

// RemoveToNodeIDs removes the "to_nodes" edge to Node entities by IDs.
func (nuo *NodeUpdateOne) RemoveToNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.RemoveToNodeIDs(ids...)
	return nuo
}

// RemoveToNodes removes "to_nodes" edges to Node entities.
func (nuo *NodeUpdateOne) RemoveToNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveToNodeIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) ClearNodes() *NodeUpdateOne {
	nuo.mutation.ClearNodes()
	return nuo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.RemoveNodeIDs(ids...)
	return nuo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nuo *NodeUpdateOne) RemoveNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNodeIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (nuo *NodeUpdateOne) ClearProperties() *NodeUpdateOne {
	nuo.mutation.ClearProperties()
	return nuo
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (nuo *NodeUpdateOne) RemovePropertyIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemovePropertyIDs(ids...)
	return nuo
}

// RemoveProperties removes "properties" edges to Property entities.
func (nuo *NodeUpdateOne) RemoveProperties(p ...*Property) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemovePropertyIDs(ids...)
}

// ClearNodeLists clears all "node_lists" edges to the NodeList entity.
func (nuo *NodeUpdateOne) ClearNodeLists() *NodeUpdateOne {
	nuo.mutation.ClearNodeLists()
	return nuo
}

// RemoveNodeListIDs removes the "node_lists" edge to NodeList entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeListIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemoveNodeListIDs(ids...)
	return nuo
}

// RemoveNodeLists removes "node_lists" edges to NodeList entities.
func (nuo *NodeUpdateOne) RemoveNodeLists(n ...*NodeList) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNodeListIDs(ids...)
}

// ClearEdgeTypes clears all "edge_types" edges to the EdgeType entity.
func (nuo *NodeUpdateOne) ClearEdgeTypes() *NodeUpdateOne {
	nuo.mutation.ClearEdgeTypes()
	return nuo
}

// RemoveEdgeTypeIDs removes the "edge_types" edge to EdgeType entities by IDs.
func (nuo *NodeUpdateOne) RemoveEdgeTypeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveEdgeTypeIDs(ids...)
	return nuo
}

// RemoveEdgeTypes removes "edge_types" edges to EdgeType entities.
func (nuo *NodeUpdateOne) RemoveEdgeTypes(e ...*EdgeType) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveEdgeTypeIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodeUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	return nil
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.NodeListID(); ok {
		_spec.SetField(node.FieldNodeListID, field.TypeUUID, value)
	}
	if nuo.mutation.NodeListIDCleared() {
		_spec.ClearField(node.FieldNodeListID, field.TypeUUID)
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedLicenses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldLicenses, value)
		})
	}
	if value, ok := nuo.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nuo.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuo.mutation.ReleaseDate(); ok {
		_spec.SetField(node.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.BuildDate(); ok {
		_spec.SetField(node.FieldBuildDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.ValidUntilDate(); ok {
		_spec.SetField(node.FieldValidUntilDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedAttribution(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAttribution, value)
		})
	}
	if value, ok := nuo.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedFileTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldFileTypes, value)
		})
	}
	if value, ok := nuo.mutation.Hashes(); ok {
		_spec.SetField(node.FieldHashes, field.TypeJSON, value)
	}
	if nuo.mutation.HashesCleared() {
		_spec.ClearField(node.FieldHashes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Identifiers(); ok {
		_spec.SetField(node.FieldIdentifiers, field.TypeJSON, value)
	}
	if nuo.mutation.IdentifiersCleared() {
		_spec.ClearField(node.FieldIdentifiers, field.TypeJSON)
	}
	if nuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !nuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedOriginatorsIDs(); len(nodes) > 0 && !nuo.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedExternalReferencesIDs(); len(nodes) > 0 && !nuo.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.PrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedPrimaryPurposeIDs(); len(nodes) > 0 && !nuo.mutation.PrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PrimaryPurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PrimaryPurposeTable,
			Columns: []string{node.PrimaryPurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ToNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &EdgeTypeCreate{config: nuo.config, mutation: newEdgeTypeMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedToNodesIDs(); len(nodes) > 0 && !nuo.mutation.ToNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EdgeTypeCreate{config: nuo.config, mutation: newEdgeTypeMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ToNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.ToNodesTable,
			Columns: node.ToNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EdgeTypeCreate{config: nuo.config, mutation: newEdgeTypeMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !nuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.PropertiesTable,
			Columns: []string{node.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeListsIDs(); len(nodes) > 0 && !nuo.mutation.NodeListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   node.NodeListsTable,
			Columns: node.NodeListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedEdgeTypesIDs(); len(nodes) > 0 && !nuo.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EdgeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
