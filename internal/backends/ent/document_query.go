// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobom/storage/internal/backends/ent/annotation"
	"github.com/protobom/storage/internal/backends/ent/document"
	"github.com/protobom/storage/internal/backends/ent/documenttype"
	"github.com/protobom/storage/internal/backends/ent/edgetype"
	"github.com/protobom/storage/internal/backends/ent/externalreference"
	"github.com/protobom/storage/internal/backends/ent/hashesentry"
	"github.com/protobom/storage/internal/backends/ent/identifiersentry"
	"github.com/protobom/storage/internal/backends/ent/metadata"
	"github.com/protobom/storage/internal/backends/ent/node"
	"github.com/protobom/storage/internal/backends/ent/nodelist"
	"github.com/protobom/storage/internal/backends/ent/person"
	"github.com/protobom/storage/internal/backends/ent/predicate"
	"github.com/protobom/storage/internal/backends/ent/property"
	"github.com/protobom/storage/internal/backends/ent/purpose"
	"github.com/protobom/storage/internal/backends/ent/sourcedata"
	"github.com/protobom/storage/internal/backends/ent/tool"
)

// DocumentQuery is the builder for querying Document entities.
type DocumentQuery struct {
	config
	ctx                    *QueryContext
	order                  []document.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Document
	withAnnotations        *AnnotationQuery
	withMetadata           *MetadataQuery
	withNodeList           *NodeListQuery
	withDocumentTypes      *DocumentTypeQuery
	withEdgeTypes          *EdgeTypeQuery
	withExternalReferences *ExternalReferenceQuery
	withHashes             *HashesEntryQuery
	withIdentifiers        *IdentifiersEntryQuery
	withNodes              *NodeQuery
	withPersons            *PersonQuery
	withProperties         *PropertyQuery
	withPurposes           *PurposeQuery
	withSourceData         *SourceDataQuery
	withTools              *ToolQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentQuery builder.
func (dq *DocumentQuery) Where(ps ...predicate.Document) *DocumentQuery {
	dq.predicates = append(dq.predicates, ps...)
	return dq
}

// Limit the number of records to be returned by this query.
func (dq *DocumentQuery) Limit(limit int) *DocumentQuery {
	dq.ctx.Limit = &limit
	return dq
}

// Offset to start from.
func (dq *DocumentQuery) Offset(offset int) *DocumentQuery {
	dq.ctx.Offset = &offset
	return dq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dq *DocumentQuery) Unique(unique bool) *DocumentQuery {
	dq.ctx.Unique = &unique
	return dq
}

// Order specifies how the records should be ordered.
func (dq *DocumentQuery) Order(o ...document.OrderOption) *DocumentQuery {
	dq.order = append(dq.order, o...)
	return dq
}

// QueryAnnotations chains the current query on the "annotations" edge.
func (dq *DocumentQuery) QueryAnnotations() *AnnotationQuery {
	query := (&AnnotationClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(annotation.Table, annotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, document.AnnotationsTable, document.AnnotationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetadata chains the current query on the "metadata" edge.
func (dq *DocumentQuery) QueryMetadata() *MetadataQuery {
	query := (&MetadataClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.MetadataTable, document.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNodeList chains the current query on the "node_list" edge.
func (dq *DocumentQuery) QueryNodeList() *NodeListQuery {
	query := (&NodeListClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(nodelist.Table, nodelist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.NodeListTable, document.NodeListColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocumentTypes chains the current query on the "document_types" edge.
func (dq *DocumentQuery) QueryDocumentTypes() *DocumentTypeQuery {
	query := (&DocumentTypeClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(documenttype.Table, documenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.DocumentTypesTable, document.DocumentTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEdgeTypes chains the current query on the "edge_types" edge.
func (dq *DocumentQuery) QueryEdgeTypes() *EdgeTypeQuery {
	query := (&EdgeTypeClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(edgetype.Table, edgetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.EdgeTypesTable, document.EdgeTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExternalReferences chains the current query on the "external_references" edge.
func (dq *DocumentQuery) QueryExternalReferences() *ExternalReferenceQuery {
	query := (&ExternalReferenceClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(externalreference.Table, externalreference.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.ExternalReferencesTable, document.ExternalReferencesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHashes chains the current query on the "hashes" edge.
func (dq *DocumentQuery) QueryHashes() *HashesEntryQuery {
	query := (&HashesEntryClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(hashesentry.Table, hashesentry.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.HashesTable, document.HashesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIdentifiers chains the current query on the "identifiers" edge.
func (dq *DocumentQuery) QueryIdentifiers() *IdentifiersEntryQuery {
	query := (&IdentifiersEntryClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(identifiersentry.Table, identifiersentry.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.IdentifiersTable, document.IdentifiersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNodes chains the current query on the "nodes" edge.
func (dq *DocumentQuery) QueryNodes() *NodeQuery {
	query := (&NodeClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.NodesTable, document.NodesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersons chains the current query on the "persons" edge.
func (dq *DocumentQuery) QueryPersons() *PersonQuery {
	query := (&PersonClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.PersonsTable, document.PersonsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProperties chains the current query on the "properties" edge.
func (dq *DocumentQuery) QueryProperties() *PropertyQuery {
	query := (&PropertyClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.PropertiesTable, document.PropertiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPurposes chains the current query on the "purposes" edge.
func (dq *DocumentQuery) QueryPurposes() *PurposeQuery {
	query := (&PurposeClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(purpose.Table, purpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.PurposesTable, document.PurposesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySourceData chains the current query on the "source_data" edge.
func (dq *DocumentQuery) QuerySourceData() *SourceDataQuery {
	query := (&SourceDataClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(sourcedata.Table, sourcedata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.SourceDataTable, document.SourceDataPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTools chains the current query on the "tools" edge.
func (dq *DocumentQuery) QueryTools() *ToolQuery {
	query := (&ToolClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(tool.Table, tool.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, document.ToolsTable, document.ToolsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Document entity from the query.
// Returns a *NotFoundError when no Document was found.
func (dq *DocumentQuery) First(ctx context.Context) (*Document, error) {
	nodes, err := dq.Limit(1).All(setContextOp(ctx, dq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{document.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dq *DocumentQuery) FirstX(ctx context.Context) *Document {
	node, err := dq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Document ID from the query.
// Returns a *NotFoundError when no Document ID was found.
func (dq *DocumentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dq.Limit(1).IDs(setContextOp(ctx, dq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{document.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dq *DocumentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Document entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Document entity is found.
// Returns a *NotFoundError when no Document entities are found.
func (dq *DocumentQuery) Only(ctx context.Context) (*Document, error) {
	nodes, err := dq.Limit(2).All(setContextOp(ctx, dq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{document.Label}
	default:
		return nil, &NotSingularError{document.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dq *DocumentQuery) OnlyX(ctx context.Context) *Document {
	node, err := dq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Document ID in the query.
// Returns a *NotSingularError when more than one Document ID is found.
// Returns a *NotFoundError when no entities are found.
func (dq *DocumentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dq.Limit(2).IDs(setContextOp(ctx, dq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{document.Label}
	default:
		err = &NotSingularError{document.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dq *DocumentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Documents.
func (dq *DocumentQuery) All(ctx context.Context) ([]*Document, error) {
	ctx = setContextOp(ctx, dq.ctx, ent.OpQueryAll)
	if err := dq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Document, *DocumentQuery]()
	return withInterceptors[[]*Document](ctx, dq, qr, dq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dq *DocumentQuery) AllX(ctx context.Context) []*Document {
	nodes, err := dq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Document IDs.
func (dq *DocumentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dq.ctx.Unique == nil && dq.path != nil {
		dq.Unique(true)
	}
	ctx = setContextOp(ctx, dq.ctx, ent.OpQueryIDs)
	if err = dq.Select(document.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dq *DocumentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dq *DocumentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dq.ctx, ent.OpQueryCount)
	if err := dq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dq, querierCount[*DocumentQuery](), dq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dq *DocumentQuery) CountX(ctx context.Context) int {
	count, err := dq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dq *DocumentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dq.ctx, ent.OpQueryExist)
	switch _, err := dq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dq *DocumentQuery) ExistX(ctx context.Context) bool {
	exist, err := dq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dq *DocumentQuery) Clone() *DocumentQuery {
	if dq == nil {
		return nil
	}
	return &DocumentQuery{
		config:                 dq.config,
		ctx:                    dq.ctx.Clone(),
		order:                  append([]document.OrderOption{}, dq.order...),
		inters:                 append([]Interceptor{}, dq.inters...),
		predicates:             append([]predicate.Document{}, dq.predicates...),
		withAnnotations:        dq.withAnnotations.Clone(),
		withMetadata:           dq.withMetadata.Clone(),
		withNodeList:           dq.withNodeList.Clone(),
		withDocumentTypes:      dq.withDocumentTypes.Clone(),
		withEdgeTypes:          dq.withEdgeTypes.Clone(),
		withExternalReferences: dq.withExternalReferences.Clone(),
		withHashes:             dq.withHashes.Clone(),
		withIdentifiers:        dq.withIdentifiers.Clone(),
		withNodes:              dq.withNodes.Clone(),
		withPersons:            dq.withPersons.Clone(),
		withProperties:         dq.withProperties.Clone(),
		withPurposes:           dq.withPurposes.Clone(),
		withSourceData:         dq.withSourceData.Clone(),
		withTools:              dq.withTools.Clone(),
		// clone intermediate query.
		sql:  dq.sql.Clone(),
		path: dq.path,
	}
}

// WithAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithAnnotations(opts ...func(*AnnotationQuery)) *DocumentQuery {
	query := (&AnnotationClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withAnnotations = query
	return dq
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithMetadata(opts ...func(*MetadataQuery)) *DocumentQuery {
	query := (&MetadataClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withMetadata = query
	return dq
}

// WithNodeList tells the query-builder to eager-load the nodes that are connected to
// the "node_list" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithNodeList(opts ...func(*NodeListQuery)) *DocumentQuery {
	query := (&NodeListClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withNodeList = query
	return dq
}

// WithDocumentTypes tells the query-builder to eager-load the nodes that are connected to
// the "document_types" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithDocumentTypes(opts ...func(*DocumentTypeQuery)) *DocumentQuery {
	query := (&DocumentTypeClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withDocumentTypes = query
	return dq
}

// WithEdgeTypes tells the query-builder to eager-load the nodes that are connected to
// the "edge_types" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithEdgeTypes(opts ...func(*EdgeTypeQuery)) *DocumentQuery {
	query := (&EdgeTypeClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withEdgeTypes = query
	return dq
}

// WithExternalReferences tells the query-builder to eager-load the nodes that are connected to
// the "external_references" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithExternalReferences(opts ...func(*ExternalReferenceQuery)) *DocumentQuery {
	query := (&ExternalReferenceClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withExternalReferences = query
	return dq
}

// WithHashes tells the query-builder to eager-load the nodes that are connected to
// the "hashes" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithHashes(opts ...func(*HashesEntryQuery)) *DocumentQuery {
	query := (&HashesEntryClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withHashes = query
	return dq
}

// WithIdentifiers tells the query-builder to eager-load the nodes that are connected to
// the "identifiers" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithIdentifiers(opts ...func(*IdentifiersEntryQuery)) *DocumentQuery {
	query := (&IdentifiersEntryClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withIdentifiers = query
	return dq
}

// WithNodes tells the query-builder to eager-load the nodes that are connected to
// the "nodes" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithNodes(opts ...func(*NodeQuery)) *DocumentQuery {
	query := (&NodeClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withNodes = query
	return dq
}

// WithPersons tells the query-builder to eager-load the nodes that are connected to
// the "persons" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithPersons(opts ...func(*PersonQuery)) *DocumentQuery {
	query := (&PersonClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withPersons = query
	return dq
}

// WithProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithProperties(opts ...func(*PropertyQuery)) *DocumentQuery {
	query := (&PropertyClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withProperties = query
	return dq
}

// WithPurposes tells the query-builder to eager-load the nodes that are connected to
// the "purposes" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithPurposes(opts ...func(*PurposeQuery)) *DocumentQuery {
	query := (&PurposeClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withPurposes = query
	return dq
}

// WithSourceData tells the query-builder to eager-load the nodes that are connected to
// the "source_data" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithSourceData(opts ...func(*SourceDataQuery)) *DocumentQuery {
	query := (&SourceDataClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withSourceData = query
	return dq
}

// WithTools tells the query-builder to eager-load the nodes that are connected to
// the "tools" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithTools(opts ...func(*ToolQuery)) *DocumentQuery {
	query := (&ToolClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withTools = query
	return dq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		MetadataID uuid.UUID `json:"-"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Document.Query().
//		GroupBy(document.FieldMetadataID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dq *DocumentQuery) GroupBy(field string, fields ...string) *DocumentGroupBy {
	dq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentGroupBy{build: dq}
	grbuild.flds = &dq.ctx.Fields
	grbuild.label = document.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		MetadataID uuid.UUID `json:"-"`
//	}
//
//	client.Document.Query().
//		Select(document.FieldMetadataID).
//		Scan(ctx, &v)
func (dq *DocumentQuery) Select(fields ...string) *DocumentSelect {
	dq.ctx.Fields = append(dq.ctx.Fields, fields...)
	sbuild := &DocumentSelect{DocumentQuery: dq}
	sbuild.label = document.Label
	sbuild.flds, sbuild.scan = &dq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentSelect configured with the given aggregations.
func (dq *DocumentQuery) Aggregate(fns ...AggregateFunc) *DocumentSelect {
	return dq.Select().Aggregate(fns...)
}

func (dq *DocumentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dq); err != nil {
				return err
			}
		}
	}
	for _, f := range dq.ctx.Fields {
		if !document.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dq.path != nil {
		prev, err := dq.path(ctx)
		if err != nil {
			return err
		}
		dq.sql = prev
	}
	return nil
}

func (dq *DocumentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Document, error) {
	var (
		nodes       = []*Document{}
		_spec       = dq.querySpec()
		loadedTypes = [14]bool{
			dq.withAnnotations != nil,
			dq.withMetadata != nil,
			dq.withNodeList != nil,
			dq.withDocumentTypes != nil,
			dq.withEdgeTypes != nil,
			dq.withExternalReferences != nil,
			dq.withHashes != nil,
			dq.withIdentifiers != nil,
			dq.withNodes != nil,
			dq.withPersons != nil,
			dq.withProperties != nil,
			dq.withPurposes != nil,
			dq.withSourceData != nil,
			dq.withTools != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Document).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Document{config: dq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dq.withAnnotations; query != nil {
		if err := dq.loadAnnotations(ctx, query, nodes,
			func(n *Document) { n.Edges.Annotations = []*Annotation{} },
			func(n *Document, e *Annotation) { n.Edges.Annotations = append(n.Edges.Annotations, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withMetadata; query != nil {
		if err := dq.loadMetadata(ctx, query, nodes, nil,
			func(n *Document, e *Metadata) { n.Edges.Metadata = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withNodeList; query != nil {
		if err := dq.loadNodeList(ctx, query, nodes, nil,
			func(n *Document, e *NodeList) { n.Edges.NodeList = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withDocumentTypes; query != nil {
		if err := dq.loadDocumentTypes(ctx, query, nodes,
			func(n *Document) { n.Edges.DocumentTypes = []*DocumentType{} },
			func(n *Document, e *DocumentType) { n.Edges.DocumentTypes = append(n.Edges.DocumentTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withEdgeTypes; query != nil {
		if err := dq.loadEdgeTypes(ctx, query, nodes,
			func(n *Document) { n.Edges.EdgeTypes = []*EdgeType{} },
			func(n *Document, e *EdgeType) { n.Edges.EdgeTypes = append(n.Edges.EdgeTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withExternalReferences; query != nil {
		if err := dq.loadExternalReferences(ctx, query, nodes,
			func(n *Document) { n.Edges.ExternalReferences = []*ExternalReference{} },
			func(n *Document, e *ExternalReference) {
				n.Edges.ExternalReferences = append(n.Edges.ExternalReferences, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := dq.withHashes; query != nil {
		if err := dq.loadHashes(ctx, query, nodes,
			func(n *Document) { n.Edges.Hashes = []*HashesEntry{} },
			func(n *Document, e *HashesEntry) { n.Edges.Hashes = append(n.Edges.Hashes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withIdentifiers; query != nil {
		if err := dq.loadIdentifiers(ctx, query, nodes,
			func(n *Document) { n.Edges.Identifiers = []*IdentifiersEntry{} },
			func(n *Document, e *IdentifiersEntry) { n.Edges.Identifiers = append(n.Edges.Identifiers, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withNodes; query != nil {
		if err := dq.loadNodes(ctx, query, nodes,
			func(n *Document) { n.Edges.Nodes = []*Node{} },
			func(n *Document, e *Node) { n.Edges.Nodes = append(n.Edges.Nodes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withPersons; query != nil {
		if err := dq.loadPersons(ctx, query, nodes,
			func(n *Document) { n.Edges.Persons = []*Person{} },
			func(n *Document, e *Person) { n.Edges.Persons = append(n.Edges.Persons, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withProperties; query != nil {
		if err := dq.loadProperties(ctx, query, nodes,
			func(n *Document) { n.Edges.Properties = []*Property{} },
			func(n *Document, e *Property) { n.Edges.Properties = append(n.Edges.Properties, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withPurposes; query != nil {
		if err := dq.loadPurposes(ctx, query, nodes,
			func(n *Document) { n.Edges.Purposes = []*Purpose{} },
			func(n *Document, e *Purpose) { n.Edges.Purposes = append(n.Edges.Purposes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withSourceData; query != nil {
		if err := dq.loadSourceData(ctx, query, nodes,
			func(n *Document) { n.Edges.SourceData = []*SourceData{} },
			func(n *Document, e *SourceData) { n.Edges.SourceData = append(n.Edges.SourceData, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withTools; query != nil {
		if err := dq.loadTools(ctx, query, nodes,
			func(n *Document) { n.Edges.Tools = []*Tool{} },
			func(n *Document, e *Tool) { n.Edges.Tools = append(n.Edges.Tools, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dq *DocumentQuery) loadAnnotations(ctx context.Context, query *AnnotationQuery, nodes []*Document, init func(*Document), assign func(*Document, *Annotation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(annotation.FieldDocumentID)
	}
	query.Where(predicate.Annotation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.AnnotationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DocumentID
		if fk == nil {
			return fmt.Errorf(`foreign-key "document_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "document_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dq *DocumentQuery) loadMetadata(ctx context.Context, query *MetadataQuery, nodes []*Document, init func(*Document), assign func(*Document, *Metadata)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Document)
	for i := range nodes {
		fk := nodes[i].MetadataID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(metadata.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "metadata_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadNodeList(ctx context.Context, query *NodeListQuery, nodes []*Document, init func(*Document), assign func(*Document, *NodeList)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Document)
	for i := range nodes {
		fk := nodes[i].NodeListID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(nodelist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "node_list_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadDocumentTypes(ctx context.Context, query *DocumentTypeQuery, nodes []*Document, init func(*Document), assign func(*Document, *DocumentType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.DocumentTypesTable)
		s.Join(joinT).On(s.C(documenttype.FieldID), joinT.C(document.DocumentTypesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.DocumentTypesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.DocumentTypesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DocumentType](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "document_types" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadEdgeTypes(ctx context.Context, query *EdgeTypeQuery, nodes []*Document, init func(*Document), assign func(*Document, *EdgeType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.EdgeTypesTable)
		s.Join(joinT).On(s.C(edgetype.FieldID), joinT.C(document.EdgeTypesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.EdgeTypesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.EdgeTypesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*EdgeType](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "edge_types" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadExternalReferences(ctx context.Context, query *ExternalReferenceQuery, nodes []*Document, init func(*Document), assign func(*Document, *ExternalReference)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.ExternalReferencesTable)
		s.Join(joinT).On(s.C(externalreference.FieldID), joinT.C(document.ExternalReferencesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.ExternalReferencesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.ExternalReferencesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ExternalReference](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "external_references" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadHashes(ctx context.Context, query *HashesEntryQuery, nodes []*Document, init func(*Document), assign func(*Document, *HashesEntry)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.HashesTable)
		s.Join(joinT).On(s.C(hashesentry.FieldID), joinT.C(document.HashesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.HashesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.HashesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HashesEntry](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "hashes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadIdentifiers(ctx context.Context, query *IdentifiersEntryQuery, nodes []*Document, init func(*Document), assign func(*Document, *IdentifiersEntry)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.IdentifiersTable)
		s.Join(joinT).On(s.C(identifiersentry.FieldID), joinT.C(document.IdentifiersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.IdentifiersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.IdentifiersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IdentifiersEntry](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "identifiers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadNodes(ctx context.Context, query *NodeQuery, nodes []*Document, init func(*Document), assign func(*Document, *Node)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.NodesTable)
		s.Join(joinT).On(s.C(node.FieldID), joinT.C(document.NodesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.NodesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.NodesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Node](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "nodes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadPersons(ctx context.Context, query *PersonQuery, nodes []*Document, init func(*Document), assign func(*Document, *Person)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.PersonsTable)
		s.Join(joinT).On(s.C(person.FieldID), joinT.C(document.PersonsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.PersonsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.PersonsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Person](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "persons" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadProperties(ctx context.Context, query *PropertyQuery, nodes []*Document, init func(*Document), assign func(*Document, *Property)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.PropertiesTable)
		s.Join(joinT).On(s.C(property.FieldID), joinT.C(document.PropertiesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.PropertiesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.PropertiesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Property](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "properties" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadPurposes(ctx context.Context, query *PurposeQuery, nodes []*Document, init func(*Document), assign func(*Document, *Purpose)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[int]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.PurposesTable)
		s.Join(joinT).On(s.C(purpose.FieldID), joinT.C(document.PurposesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.PurposesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.PurposesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Purpose](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "purposes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadSourceData(ctx context.Context, query *SourceDataQuery, nodes []*Document, init func(*Document), assign func(*Document, *SourceData)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.SourceDataTable)
		s.Join(joinT).On(s.C(sourcedata.FieldID), joinT.C(document.SourceDataPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.SourceDataPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.SourceDataPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SourceData](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "source_data" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadTools(ctx context.Context, query *ToolQuery, nodes []*Document, init func(*Document), assign func(*Document, *Tool)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Document)
	nids := make(map[uuid.UUID]map[*Document]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(document.ToolsTable)
		s.Join(joinT).On(s.C(tool.FieldID), joinT.C(document.ToolsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(document.ToolsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(document.ToolsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Document]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tool](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tools" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dq *DocumentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dq.querySpec()
	_spec.Node.Columns = dq.ctx.Fields
	if len(dq.ctx.Fields) > 0 {
		_spec.Unique = dq.ctx.Unique != nil && *dq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dq.driver, _spec)
}

func (dq *DocumentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	_spec.From = dq.sql
	if unique := dq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dq.path != nil {
		_spec.Unique = true
	}
	if fields := dq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for i := range fields {
			if fields[i] != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dq.withMetadata != nil {
			_spec.Node.AddColumnOnce(document.FieldMetadataID)
		}
		if dq.withNodeList != nil {
			_spec.Node.AddColumnOnce(document.FieldNodeListID)
		}
	}
	if ps := dq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dq *DocumentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dq.driver.Dialect())
	t1 := builder.Table(document.Table)
	columns := dq.ctx.Fields
	if len(columns) == 0 {
		columns = document.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dq.sql != nil {
		selector = dq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dq.ctx.Unique != nil && *dq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dq.predicates {
		p(selector)
	}
	for _, p := range dq.order {
		p(selector)
	}
	if offset := dq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DocumentGroupBy is the group-by builder for Document entities.
type DocumentGroupBy struct {
	selector
	build *DocumentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dgb *DocumentGroupBy) Aggregate(fns ...AggregateFunc) *DocumentGroupBy {
	dgb.fns = append(dgb.fns, fns...)
	return dgb
}

// Scan applies the selector query and scans the result into the given value.
func (dgb *DocumentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dgb.build.ctx, ent.OpQueryGroupBy)
	if err := dgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentQuery, *DocumentGroupBy](ctx, dgb.build, dgb, dgb.build.inters, v)
}

func (dgb *DocumentGroupBy) sqlScan(ctx context.Context, root *DocumentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dgb.fns))
	for _, fn := range dgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dgb.flds)+len(dgb.fns))
		for _, f := range *dgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentSelect is the builder for selecting fields of Document entities.
type DocumentSelect struct {
	*DocumentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ds *DocumentSelect) Aggregate(fns ...AggregateFunc) *DocumentSelect {
	ds.fns = append(ds.fns, fns...)
	return ds
}

// Scan applies the selector query and scans the result into the given value.
func (ds *DocumentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ds.ctx, ent.OpQuerySelect)
	if err := ds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentQuery, *DocumentSelect](ctx, ds.DocumentQuery, ds, ds.inters, v)
}

func (ds *DocumentSelect) sqlScan(ctx context.Context, root *DocumentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ds.fns))
	for _, fn := range ds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
