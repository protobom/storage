// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package edgetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldLTE(FieldID, id))
}

// ProtoMessage applies equality check predicate on the "proto_message" field. It's identical to ProtoMessageEQ.
func ProtoMessage(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldProtoMessage, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldNodeID, v))
}

// ToNodeID applies equality check predicate on the "to_node_id" field. It's identical to ToNodeIDEQ.
func ToNodeID(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldToNodeID, v))
}

// ProtoMessageEQ applies the EQ predicate on the "proto_message" field.
func ProtoMessageEQ(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldProtoMessage, v))
}

// ProtoMessageNEQ applies the NEQ predicate on the "proto_message" field.
func ProtoMessageNEQ(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNEQ(FieldProtoMessage, v))
}

// ProtoMessageIn applies the In predicate on the "proto_message" field.
func ProtoMessageIn(vs ...*sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldIn(FieldProtoMessage, vs...))
}

// ProtoMessageNotIn applies the NotIn predicate on the "proto_message" field.
func ProtoMessageNotIn(vs ...*sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNotIn(FieldProtoMessage, vs...))
}

// ProtoMessageGT applies the GT predicate on the "proto_message" field.
func ProtoMessageGT(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldGT(FieldProtoMessage, v))
}

// ProtoMessageGTE applies the GTE predicate on the "proto_message" field.
func ProtoMessageGTE(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldGTE(FieldProtoMessage, v))
}

// ProtoMessageLT applies the LT predicate on the "proto_message" field.
func ProtoMessageLT(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldLT(FieldProtoMessage, v))
}

// ProtoMessageLTE applies the LTE predicate on the "proto_message" field.
func ProtoMessageLTE(v *sbom.Edge) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldLTE(FieldProtoMessage, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNotIn(FieldType, vs...))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNotIn(FieldNodeID, vs...))
}

// ToNodeIDEQ applies the EQ predicate on the "to_node_id" field.
func ToNodeIDEQ(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldEQ(FieldToNodeID, v))
}

// ToNodeIDNEQ applies the NEQ predicate on the "to_node_id" field.
func ToNodeIDNEQ(v uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNEQ(FieldToNodeID, v))
}

// ToNodeIDIn applies the In predicate on the "to_node_id" field.
func ToNodeIDIn(vs ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldIn(FieldToNodeID, vs...))
}

// ToNodeIDNotIn applies the NotIn predicate on the "to_node_id" field.
func ToNodeIDNotIn(vs ...uuid.UUID) predicate.EdgeType {
	return predicate.EdgeType(sql.FieldNotIn(FieldToNodeID, vs...))
}

// HasFrom applies the HasEdge predicate on the "from" edge.
func HasFrom() predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromTable, FromColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromWith applies the HasEdge predicate on the "from" edge with a given conditions (other predicates).
func HasFromWith(preds ...predicate.Node) predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := newFromStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTo applies the HasEdge predicate on the "to" edge.
func HasTo() predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToTable, ToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToWith applies the HasEdge predicate on the "to" edge with a given conditions (other predicates).
func HasToWith(preds ...predicate.Node) predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := newToStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DocumentsTable, DocumentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.Document) predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := newDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeLists applies the HasEdge predicate on the "node_lists" edge.
func HasNodeLists() predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NodeListsTable, NodeListsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeListsWith applies the HasEdge predicate on the "node_lists" edge with a given conditions (other predicates).
func HasNodeListsWith(preds ...predicate.NodeList) predicate.EdgeType {
	return predicate.EdgeType(func(s *sql.Selector) {
		step := newNodeListsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EdgeType) predicate.EdgeType {
	return predicate.EdgeType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EdgeType) predicate.EdgeType {
	return predicate.EdgeType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EdgeType) predicate.EdgeType {
	return predicate.EdgeType(sql.NotPredicates(p))
}
