// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

package externalreference

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/protobom/protobom/pkg/sbom"
	"github.com/protobom/storage/internal/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLTE(FieldID, id))
}

// DocumentID applies equality check predicate on the "document_id" field. It's identical to DocumentIDEQ.
func DocumentID(v uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldDocumentID, v))
}

// ProtoMessage applies equality check predicate on the "proto_message" field. It's identical to ProtoMessageEQ.
func ProtoMessage(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldProtoMessage, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldURL, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldComment, v))
}

// Authority applies equality check predicate on the "authority" field. It's identical to AuthorityEQ.
func Authority(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldAuthority, v))
}

// DocumentIDEQ applies the EQ predicate on the "document_id" field.
func DocumentIDEQ(v uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldDocumentID, v))
}

// DocumentIDNEQ applies the NEQ predicate on the "document_id" field.
func DocumentIDNEQ(v uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldDocumentID, v))
}

// DocumentIDIn applies the In predicate on the "document_id" field.
func DocumentIDIn(vs ...uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldDocumentID, vs...))
}

// DocumentIDNotIn applies the NotIn predicate on the "document_id" field.
func DocumentIDNotIn(vs ...uuid.UUID) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldDocumentID, vs...))
}

// DocumentIDIsNil applies the IsNil predicate on the "document_id" field.
func DocumentIDIsNil() predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIsNull(FieldDocumentID))
}

// DocumentIDNotNil applies the NotNil predicate on the "document_id" field.
func DocumentIDNotNil() predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotNull(FieldDocumentID))
}

// ProtoMessageEQ applies the EQ predicate on the "proto_message" field.
func ProtoMessageEQ(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldProtoMessage, v))
}

// ProtoMessageNEQ applies the NEQ predicate on the "proto_message" field.
func ProtoMessageNEQ(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldProtoMessage, v))
}

// ProtoMessageIn applies the In predicate on the "proto_message" field.
func ProtoMessageIn(vs ...*sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldProtoMessage, vs...))
}

// ProtoMessageNotIn applies the NotIn predicate on the "proto_message" field.
func ProtoMessageNotIn(vs ...*sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldProtoMessage, vs...))
}

// ProtoMessageGT applies the GT predicate on the "proto_message" field.
func ProtoMessageGT(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGT(FieldProtoMessage, v))
}

// ProtoMessageGTE applies the GTE predicate on the "proto_message" field.
func ProtoMessageGTE(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGTE(FieldProtoMessage, v))
}

// ProtoMessageLT applies the LT predicate on the "proto_message" field.
func ProtoMessageLT(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLT(FieldProtoMessage, v))
}

// ProtoMessageLTE applies the LTE predicate on the "proto_message" field.
func ProtoMessageLTE(v *sbom.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLTE(FieldProtoMessage, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContainsFold(FieldURL, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContainsFold(FieldComment, v))
}

// AuthorityEQ applies the EQ predicate on the "authority" field.
func AuthorityEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldAuthority, v))
}

// AuthorityNEQ applies the NEQ predicate on the "authority" field.
func AuthorityNEQ(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldAuthority, v))
}

// AuthorityIn applies the In predicate on the "authority" field.
func AuthorityIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldAuthority, vs...))
}

// AuthorityNotIn applies the NotIn predicate on the "authority" field.
func AuthorityNotIn(vs ...string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldAuthority, vs...))
}

// AuthorityGT applies the GT predicate on the "authority" field.
func AuthorityGT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGT(FieldAuthority, v))
}

// AuthorityGTE applies the GTE predicate on the "authority" field.
func AuthorityGTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldGTE(FieldAuthority, v))
}

// AuthorityLT applies the LT predicate on the "authority" field.
func AuthorityLT(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLT(FieldAuthority, v))
}

// AuthorityLTE applies the LTE predicate on the "authority" field.
func AuthorityLTE(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldLTE(FieldAuthority, v))
}

// AuthorityContains applies the Contains predicate on the "authority" field.
func AuthorityContains(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContains(FieldAuthority, v))
}

// AuthorityHasPrefix applies the HasPrefix predicate on the "authority" field.
func AuthorityHasPrefix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasPrefix(FieldAuthority, v))
}

// AuthorityHasSuffix applies the HasSuffix predicate on the "authority" field.
func AuthorityHasSuffix(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldHasSuffix(FieldAuthority, v))
}

// AuthorityIsNil applies the IsNil predicate on the "authority" field.
func AuthorityIsNil() predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIsNull(FieldAuthority))
}

// AuthorityNotNil applies the NotNil predicate on the "authority" field.
func AuthorityNotNil() predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotNull(FieldAuthority))
}

// AuthorityEqualFold applies the EqualFold predicate on the "authority" field.
func AuthorityEqualFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEqualFold(FieldAuthority, v))
}

// AuthorityContainsFold applies the ContainsFold predicate on the "authority" field.
func AuthorityContainsFold(v string) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldContainsFold(FieldAuthority, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ExternalReference {
	return predicate.ExternalReference(sql.FieldNotIn(FieldType, vs...))
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DocumentTable, DocumentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.Document) predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := newDocumentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHashes applies the HasEdge predicate on the "hashes" edge.
func HasHashes() predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HashesTable, HashesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHashesWith applies the HasEdge predicate on the "hashes" edge with a given conditions (other predicates).
func HasHashesWith(preds ...predicate.HashesEntry) predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := newHashesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodes applies the HasEdge predicate on the "nodes" edge.
func HasNodes() predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NodesTable, NodesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodesWith applies the HasEdge predicate on the "nodes" edge with a given conditions (other predicates).
func HasNodesWith(preds ...predicate.Node) predicate.ExternalReference {
	return predicate.ExternalReference(func(s *sql.Selector) {
		step := newNodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExternalReference) predicate.ExternalReference {
	return predicate.ExternalReference(sql.NotPredicates(p))
}
